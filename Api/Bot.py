import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import requests
from pymongo import MongoClient
import uuid

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
MONGO_URI = os.getenv('MONGODB_URI')
ADMIN_ID = os.getenv('ADMIN_ID')

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
client = MongoClient(MONGO_URI)
db = client.crypto_exchange_bot

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class ExchangeStates(StatesGroup):
    CHOOSE_PAIR = State()
    ENTER_AMOUNT = State()
    CONFIRM_EXCHANGE = State()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'], state='*')
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = db.users.find_one({"user_id": user_id})
    
    if not user_data:
        db.users.insert_one({
            "user_id": user_id,
            "username": message.from_user.username,
            "balance": {"BTC": 0, "ETH": 0, "USDT": 0},
            "transactions": []
        })
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üí∞ –û–±–º–µ–Ω—è—Ç—å", "üíº –ë–∞–ª–∞–Ω—Å")
    keyboard.add("‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    
    await message.answer(
        "üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CryptoExchangeBot!\n"
        "–ë—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±–º–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–±–º–µ–Ω—è—Ç—å"
@dp.message_handler(text="üí∞ –û–±–º–µ–Ω—è—Ç—å", state='*')
async def start_exchange(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(
        types.InlineKeyboardButton("BTC ‚Üí USDT", callback_data="pair_BTC_USDT"),
        types.InlineKeyboardButton("ETH ‚Üí USDT", callback_data="pair_ETH_USDT")
    )
    keyboard.row(
        types.InlineKeyboardButton("USDT ‚Üí BTC", callback_data="pair_USDT_BTC"),
        types.InlineKeyboardButton("USDT ‚Üí ETH", callback_data="pair_USDT_ETH")
    )
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:", reply_markup=keyboard)
    await ExchangeStates.CHOOSE_PAIR.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—ã
@dp.callback_query_handler(lambda c: c.data.startswith('pair_'), state=ExchangeStates.CHOOSE_PAIR)
async def process_pair(callback_query: types.CallbackQuery, state: FSMContext):
    _, from_coin, to_coin = callback_query.data.split('_')
    async with state.proxy() as data:
        data['pair'] = (from_coin, to_coin)
    
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id, 
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É {from_coin} –¥–ª—è –æ–±–º–µ–Ω–∞:"
    )
    await ExchangeStates.ENTER_AMOUNT.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
@dp.message_handler(state=ExchangeStates.ENTER_AMOUNT)
async def process_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è!")
            return
            
        async with state.proxy() as data:
            from_coin, to_coin = data['pair']
            data['amount'] = amount
            
            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å
            rate = get_exchange_rate(from_coin, to_coin)
            if not rate:
                await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
                
            to_amount = amount * rate
            data['to_amount'] = round(to_amount, 6)
            data['rate'] = rate
            
            text = (
                f"üîÅ –û–±–º–µ–Ω: {amount} {from_coin} ‚Üí {data['to_amount']} {to_coin}\n"
                f"üìà –ö—É—Ä—Å: 1 {from_coin} = {rate} {to_coin}\n\n"
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –æ–±–º–µ–Ω?"
            )
            
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_yes"))
            keyboard.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_no"))
            
            await message.answer(text, reply_markup=keyboard)
            await ExchangeStates.CONFIRM_EXCHANGE.set()
            
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã!")

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞
@dp.callback_query_handler(lambda c: c.data.startswith('confirm_'), state=ExchangeStates.CONFIRM_EXCHANGE)
async def confirm_exchange(callback_query: types.CallbackQuery, state: FSMContext):
    action = callback_query.data.split('_')[1]
    
    if action == "no":
        await bot.send_message(callback_query.from_user.id, "‚ùå –û–±–º–µ–Ω –æ—Ç–º–µ–Ω–µ–Ω")
        await cmd_start(callback_query.message, state)
        return
        
    async with state.proxy() as data:
        from_coin, to_coin = data['pair']
        amount = data['amount']
        to_amount = data['to_amount']
        
        transaction_id = str(uuid.uuid4())[:8].upper()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã (–≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–±–º–µ–Ω–∞)
        db.users.update_one(
            {"user_id": callback_query.from_user.id},
            {"$inc": {f"balance.{from_coin}": -amount, f"balance.{to_coin}": to_amount}}
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        db.transactions.insert_one({
            "transaction_id": transaction_id,
            "user_id": callback_query.from_user.id,
            "pair": f"{from_coin}/{to_coin}",
            "amount": amount,
            "to_amount": to_amount,
            "status": "completed"
        })
        
        await bot.send_message(
            callback_query.from_user.id,
            f"‚úÖ –û–±–º–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
            f"ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {transaction_id}\n"
            f"–ù–∞ –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ: {to_amount} {to_coin}"
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        if ADMIN_ID:
            await bot.send_message(
                ADMIN_ID,
                f"üîî –ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è!\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback_query.from_user.username}\n"
                f"–û–±–º–µ–Ω: {amount} {from_coin} ‚Üí {to_amount} {to_coin}\n"
                f"ID: {transaction_id}"
            )
    
    await state.finish()
    await cmd_start(callback_query.message, state)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ (–¥–µ–º–æ-—Ä–µ–∂–∏–º)
def get_exchange_rate(from_coin, to_coin):
    # –†–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —á–µ—Ä–µ–∑ CoinGecko API
    demo_rates = {
        ("BTC", "USDT"): 60000,
        ("ETH", "USDT"): 3000,
        ("USDT", "BTC"): 1/60000,
        ("USDT", "ETH"): 1/3000
    }
    return demo_rates.get((from_coin, to_coin))

# –ö–æ–º–∞–Ω–¥–∞ –±–∞–ª–∞–Ω—Å–∞
@dp.message_handler(text="üíº –ë–∞–ª–∞–Ω—Å")
async def show_balance(message: types.Message):
    user_data = db.users.find_one({"user_id": message.from_user.id})
    if not user_data:
        return
        
    balance = user_data.get('balance', {})
    text = "üíº –í–∞—à –±–∞–ª–∞–Ω—Å:\n"
    for coin, amount in balance.items():
        if amount > 0:
            text += f"‚Ä¢ {coin}: {amount:.6f}\n"
    
    if text == "üíº –í–∞—à –±–∞–ª–∞–Ω—Å:\n":
        text = "üí∞ –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤"
        
    await message.answer(text)

# –ü–æ–º–æ—â—å
@dp.message_handler(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def show_help(message: types.Message):
    await message.answer(
        "‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n"
        "1. –ù–∞–∂–º–∏—Ç–µ 'üí∞ –û–±–º–µ–Ω—è—Ç—å'\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É\n"
        "3. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É\n"
        "4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é\n\n"
        "–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞: @–≤–∞—à_–∞–∫–∫–∞—É–Ω—Ç"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è Vercel
from aiogram.utils.executor import start_webhook

async def on_startup(dp):
    await bot.set_webhook(os.getenv('VERCEL_URL') + '/webhook')

async def on_shutdown(dp):
    await bot.delete_webhook()

if __name__ == '__main__':
    start_webhook(
        dispatcher=dp,
        webhook_path='/webhook',
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host="0.0.0.0",
        port=int(os.getenv('PORT', 5000))
