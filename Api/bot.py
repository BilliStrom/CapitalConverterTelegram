import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import uuid
from aiogram.utils.executor import start_webhook

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_ID = os.getenv('ADMIN_ID', '123456789')  # –í–∞—à ID –≤ Telegram

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –í–º–µ—Å—Ç–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - —Å–ª–æ–≤–∞—Ä—å –≤ –ø–∞–º—è—Ç–∏
user_data = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class ExchangeStates(StatesGroup):
    CHOOSE_PAIR = State()
    ENTER_AMOUNT = State()
    CONFIRM_EXCHANGE = State()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'], state='*')
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data:
        user_data[user_id] = {
            "balance": {"BTC": 0.1, "ETH": 0.5, "USDT": 50},
            "transactions": []
        }
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üí∞ –û–±–º–µ–Ω—è—Ç—å", "üíº –ë–∞–ª–∞–Ω—Å")
    keyboard.add("‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    
    await message.answer(
        "üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CryptoBot!\n"
        "–ë—ã—Å—Ç—Ä—ã–π –æ–±–º–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤ –æ–¥–∏–Ω –∫–ª–∏–∫\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )
    await state.finish()

# –û–±–º–µ–Ω –≤–∞–ª—é—Ç—ã
@dp.message_handler(text="üí∞ –û–±–º–µ–Ω—è—Ç—å", state='*')
async def start_exchange(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton("BTC ‚Üí USDT", callback_data="pair_BTC_USDT"),
        types.InlineKeyboardButton("ETH ‚Üí USDT", callback_data="pair_ETH_USDT"),
        types.InlineKeyboardButton("USDT ‚Üí BTC", callback_data="pair_USDT_BTC"),
        types.InlineKeyboardButton("USDT ‚Üí ETH", callback_data="pair_USDT_ETH")
    ]
    keyboard.add(*buttons)
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:", reply_markup=keyboard)
    await ExchangeStates.CHOOSE_PAIR.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—ã
@dp.callback_query_handler(lambda c: c.data.startswith('pair_'), state=ExchangeStates.CHOOSE_PAIR)
async def process_pair(callback_query: types.CallbackQuery, state: FSMContext):
    _, from_coin, to_coin = callback_query.data.split('_')
    
    await state.update_data(pair=(from_coin, to_coin))
    await bot.send_message(
        callback_query.from_user.id, 
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É {from_coin} –¥–ª—è –æ–±–º–µ–Ω–∞:"
    )
    await ExchangeStates.ENTER_AMOUNT.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã
@dp.message_handler(state=ExchangeStates.ENTER_AMOUNT)
async def process_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è!")
            return
            
        data = await state.get_data()
        from_coin, to_coin = data['pair']
        
        # –ö—É—Ä—Å—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        rates = {
            ("BTC", "USDT"): 60000,
            ("ETH", "USDT"): 3000,
            ("USDT", "BTC"): 1/60000,
            ("USDT", "ETH"): 1/3000
        }
        
        rate = rates.get((from_coin, to_coin))
        if not rate:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫—É—Ä—Å–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –ø–∞—Ä—É")
            return
            
        to_amount = round(amount * rate, 6)
        
        await state.update_data(
            amount=amount,
            to_amount=to_amount,
            rate=rate
        )
        
        text = (
            f"üîÅ –û–±–º–µ–Ω: {amount} {from_coin} ‚Üí {to_amount} {to_coin}\n"
            f"üìà –ö—É—Ä—Å: 1 {from_coin} = {rate} {to_coin}\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –æ–±–º–µ–Ω?"
        )
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_yes"))
        keyboard.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_no"))
        
        await message.answer(text, reply_markup=keyboard)
        await ExchangeStates.CONFIRM_EXCHANGE.set()
            
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞
@dp.callback_query_handler(lambda c: c.data.startswith('confirm_'), state=ExchangeStates.CONFIRM_EXCHANGE)
async def confirm_exchange(callback_query: types.CallbackQuery, state: FSMContext):
    action = callback_query.data.split('_')[1]
    user_id = callback_query.from_user.id
    
    if action == "no":
        await bot.send_message(user_id, "‚ùå –û–±–º–µ–Ω –æ—Ç–º–µ–Ω–µ–Ω")
        await cmd_start(callback_query.message, state)
        return
        
    data = await state.get_data()
    from_coin, to_coin = data['pair']
    amount = data['amount']
    to_amount = data['to_amount']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    if user_id in user_data:
        user_data[user_id]["balance"][from_coin] -= amount
        if to_coin not in user_data[user_id]["balance"]:
            user_data[user_id]["balance"][to_coin] = 0
        user_data[user_id]["balance"][to_coin] += to_amount
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction_id = str(uuid.uuid4())[:6].upper()
        user_data[user_id]["transactions"].append({
            "id": transaction_id,
            "pair": f"{from_coin}/{to_coin}",
            "amount": amount,
            "to_amount": to_amount
        })
        
        await bot.send_message(
            user_id,
            f"‚úÖ –û–±–º–µ–Ω —É—Å–ø–µ—à–µ–Ω!\n"
            f"ID: {transaction_id}\n"
            f"–ü–æ–ª—É—á–µ–Ω–æ: {to_amount} {to_coin}"
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await bot.send_message(
            ADMIN_ID,
            f"üîî –ù–æ–≤—ã–π –æ–±–º–µ–Ω!\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback_query.from_user.username}\n"
            f"–û–±–º–µ–Ω: {amount} {from_coin} ‚Üí {to_amount} {to_coin}\n"
            f"ID: {transaction_id}"
        )
    
    await state.finish()
    await cmd_start(callback_query.message, state)

# –ë–∞–ª–∞–Ω—Å
@dp.message_handler(text="üíº –ë–∞–ª–∞–Ω—Å")
async def show_balance(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        await cmd_start(message, None)
        return
        
    balance = user_data[user_id]["balance"]
    text = "üíº –í–∞—à –±–∞–ª–∞–Ω—Å:\n"
    for coin, amount in balance.items():
        text += f"‚Ä¢ {coin}: {amount:.6f}\n"
    
    await message.answer(text)

# –ü–æ–º–æ—â—å
@dp.message_handler(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def show_help(message: types.Message):
    await message.answer(
        "üÜò –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n"
        "1. –ù–∞–∂–º–∏—Ç–µ 'üí∞ –û–±–º–µ–Ω—è—Ç—å'\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –≤–∞–ª—é—Ç\n"
        "3. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É\n"
        "4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é\n\n"
        "–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞: @–≤–∞—à_–∞–∫–∫–∞—É–Ω—Ç"
    )

# –í–µ–±—Ö—É–∫ –¥–ª—è Vercel
async def on_startup(dp):
    webhook_url = os.getenv('VERCEL_URL') + '/webhook'
    await bot.set_webhook(webhook_url)
    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! Webhook: {webhook_url}")

if __name__ == '__main__':
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
