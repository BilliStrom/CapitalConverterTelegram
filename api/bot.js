const { Telegraf } = require('telegraf');
const axios = require('axios');

// –§–∏–∫—Å –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ –Ω–∞ Vercel
process.env.NTBA_FIX_319 = "1";
process.env.NTBA_FIX_350 = "1";

const bot = new Telegraf(process.env.BOT_TOKEN, {
  telegram: {
    webhookReply: false,
    agent: null
  }
});

// –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–π –≤ –ø–∞–º—è—Ç–∏ (–±–µ–∑ –∑–∞–ø–∏—Å–∏ –Ω–∞ –¥–∏—Å–∫)
const userSessions = {};

bot.use((ctx, next) => {
  const userId = ctx.from?.id;
  if (userId) {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!userSessions[userId]) {
      userSessions[userId] = {};
    }
    ctx.session = userSessions[userId];
  }
  return next();
});

// –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
const cryptoData = {
  BTC: { name: "Bitcoin", wallet: "bc1qar0srrr7xfkvy5l643lydnw9re59gtzzwf5mdq" },
  ETH: { name: "Ethereum", wallet: "0x742d35Cc6634C0532925a3b844Bc454e4438f44e" },
  USDT: { name: "Tether", wallet: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48" },
  LTC: { name: "Litecoin", wallet: "LcWJv3djruGY4uh7xVPZyKxqJJUTdrzqN7" }
};

// –ö—É—Ä—Å—ã –æ–±–º–µ–Ω–∞
const exchangeRates = {
  BTC_USDT: 63000,
  ETH_USDT: 3500,
  LTC_USDT: 75,
  BTC_ETH: 18.0,
  ETH_BTC: 0.055,
  LTC_BTC: 0.0012,
  BTC_LTC: 840,
  ETH_LTC: 46.67
};

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(ctx => {
  ctx.reply(`üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crypto Exchange Bot!
  
–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ–±–º–µ–Ω—è—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –ø–æ –≤—ã–≥–æ–¥–Ω–æ–º—É –∫—É—Ä—Å—É. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üí± /exchange - –Ω–∞—á–∞—Ç—å –æ–±–º–µ–Ω
üìä /rates - —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã
üÜò /help - –ø–æ–º–æ—â—å

–î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /exchange`);
});

// –ö–æ–º–∞–Ω–¥–∞ /rates
bot.command('rates', async ctx => {
  try {
    ctx.replyWithMarkdown(`üìà *–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã:*
    
1 BTC = ${exchangeRates.BTC_USDT} USDT
1 ETH = ${exchangeRates.ETH_USDT} USDT
1 LTC = ${exchangeRates.LTC_USDT} USDT

1 BTC = ${exchangeRates.BTC_ETH} ETH
1 ETH = ${exchangeRates.ETH_BTC} BTC
1 LTC = ${exchangeRates.LTC_BTC} BTC`);

  } catch (error) {
    ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /exchange
bot.command('exchange', ctx => {
  if (!ctx.session) ctx.session = {};
  ctx.session.step = 'select_pair';
  
  ctx.reply('üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞:', {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'BTC ‚Üí USDT', callback_data: 'pair_BTC_USDT' },
          { text: 'ETH ‚Üí BTC', callback_data: 'pair_ETH_BTC' }
        ],
        [
          { text: 'USDT ‚Üí ETH', callback_data: 'pair_USDT_ETH' },
          { text: 'LTC ‚Üí BTC', callback_data: 'pair_LTC_BTC' }
        ],
        [
          { text: '–î—Ä—É–≥–∏–µ –ø–∞—Ä—ã', callback_data: 'more_pairs' }
        ]
      ]
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
bot.action('more_pairs', ctx => {
  ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É:', {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'ETH ‚Üí USDT', callback_data: 'pair_ETH_USDT' },
          { text: 'BTC ‚Üí LTC', callback_data: 'pair_BTC_LTC' }
        ],
        [
          { text: 'USDT ‚Üí BTC', callback_data: 'pair_USDT_BTC' },
          { text: 'LTC ‚Üí ETH', callback_data: 'pair_LTC_ETH' }
        ],
        [
          { text: '‚Üê –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }
        ]
      ]
    }
  });
});

bot.action('back_to_main', ctx => {
  if (!ctx.session) ctx.session = {};
  ctx.session.step = 'select_pair';
  ctx.editMessageText('üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞:', {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'BTC ‚Üí USDT', callback_data: 'pair_BTC_USDT' },
          { text: 'ETH ‚Üí BTC', callback_data: 'pair_ETH_BTC' }
        ],
        [
          { text: 'USDT ‚Üí ETH', callback_data: 'pair_USDT_ETH' },
          { text: 'LTC ‚Üí BTC', callback_data: 'pair_LTC_BTC' }
        ],
        [
          { text: '–î—Ä—É–≥–∏–µ –ø–∞—Ä—ã', callback_data: 'more_pairs' }
        ]
      ]
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—ã
bot.action(/^pair_(\w+)_(\w+)$/, async (ctx) => {
  const [, from, to] = ctx.match;
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if (!ctx.session) ctx.session = {};
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é
  ctx.session.step = 'enter_amount';
  ctx.session.from = from.toUpperCase();
  ctx.session.to = to.toUpperCase();
  
  await ctx.deleteMessage();
  ctx.reply(`üí± –í—ã –≤—ã–±—Ä–∞–ª–∏: ${from.toUpperCase()} ‚Üí ${to.toUpperCase()}\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É ${from.toUpperCase()} –¥–ª—è –æ–±–º–µ–Ω–∞:`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
bot.on('text', async (ctx) => {
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
  if (ctx.message.text.startsWith('/')) return;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ—Å—Å–∏–∏ –∏ —à–∞–≥
  if (!ctx.session || !ctx.session.step || ctx.session.step !== 'enter_amount') {
    return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /exchange –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±–º–µ–Ω–∞');
  }
  
  const amount = parseFloat(ctx.message.text.replace(',', '.'));
  
  if (isNaN(amount)) {
    return ctx.reply('‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 0.5 –∏–ª–∏ 100');
  }
  
  if (amount <= 0) {
    return ctx.reply('‚ö†Ô∏è –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è');
  }
  
  const { from, to } = ctx.session;
  const pair = `${from}_${to}`;
  
  if (!exchangeRates[pair]) {
    return ctx.reply('‚ùå –ö—É—Ä—Å –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
  }
  
  // –†–∞—Å—Å—á–µ—Ç —Å—É–º–º—ã
  const rate = exchangeRates[pair];
  const result = (amount * rate).toFixed(6);
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É
  const formattedAmount = amount.toLocaleString('en', {
    minimumFractionDigits: 0,
    maximumFractionDigits: 8
  });
  
  const formattedResult = parseFloat(result).toLocaleString('en', {
    minimumFractionDigits: 0,
    maximumFractionDigits: 8
  });
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–∞–ª—é—Ç–∞–º
  const fromCurrency = cryptoData[from] || { name: from };
  const toCurrency = cryptoData[to] || { name: to };
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  ctx.replyWithMarkdown(`‚úÖ *–î–µ—Ç–∞–ª–∏ –æ–±–º–µ–Ω–∞:*
  
‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ: *${formattedAmount} ${from}* (${fromCurrency.name})
‚¨ÖÔ∏è –ü–æ–ª—É—á–∞–µ—Ç–µ: *${formattedResult} ${to}* (${toCurrency.name})
üìä –ö—É—Ä—Å: 1 ${from} = ${rate} ${to}

üí≥ *–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏:*
1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ ${formattedAmount} ${from} –Ω–∞ –∞–¥—Ä–µ—Å:
\`${fromCurrency.wallet}\`

2. –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏—à–ª–∏—Ç–µ TXID (—Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏) –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

‚è±Ô∏è –û—Ä–¥–µ—Ä –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω 60 –º–∏–Ω—É—Ç`);

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
  if (ctx.from?.id) {
    delete userSessions[ctx.from.id];
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.command('help', ctx => {
  ctx.replyWithMarkdown(`‚ùì *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:*
  
üí± *–û–±–º–µ–Ω –≤–∞–ª—é—Ç:*
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /exchange
2. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è –æ–±–º–µ–Ω–∞
3. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É
4. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
5. –ü—Ä–∏—à–ª–∏—Ç–µ TXID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏

üìä *–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç:*
- –í—Å–µ –∫—É—Ä—Å—ã —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
- –û–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
- –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /rates

‚è±Ô∏è *–í—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–π:*
- –ö—Ä–∏–ø—Ç–æ: 10-60 –º–∏–Ω—É—Ç
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞: 24/7

‚ö†Ô∏è *–í–∞–∂–Ω–æ:*
- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 10 USD —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç
- –ö–æ–º–∏—Å—Å–∏–∏ —Å–µ—Ç–∏ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
- –ê–¥—Ä–µ—Å–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —á–µ—Ä–µ–∑ —Å–∫–∞–Ω–µ—Ä QR-–∫–æ–¥–∞`);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Vercel
module.exports = async (req, res) => {
  try {
    if (req.method === 'POST') {
      await bot.handleUpdate(req.body, res);
    } else {
      res.status(200).json({ 
        status: 'active',
        service: 'Crypto Exchange Telegram Bot',
        version: '1.0'
      });
    }
  } catch (err) {
    console.error('Global error:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
};

// –ó–∞–ø—É—Å–∫
console.log('Crypto Exchange Bot started');