const { Telegraf, Markup } = require('telegraf');
const { Redis } = require('@upstash/redis');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
const redis = new Redis({
  url: process.env.UPSTASH_REDIS_REST_URL,
  token: process.env.UPSTASH_REDIS_REST_TOKEN,
});

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  ADMIN_ID: process.env.ADMIN_ID || 5948326124,
  FREE_SEARCH_LIMIT: 3,
  PREMIUM_COST: 100,
  SESSION_TIMEOUT: 600000,
  CHAT_TIMEOUT: 1800000,
  SEARCH_TIMEOUT: 300000,
  TERMS_URL: 'https://yourwebsite.com/terms',
  PRIVACY_URL: 'https://yourwebsite.com/privacy',
  SUPPORT_URL: 'https://t.me/your_support'
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Redis
const redisHelpers = {
  setUser: async (userId, data) => {
    try {
      await redis.set(`user:${userId}`, JSON.stringify(data));
      return true;
    } catch (error) {
      console.error('Error setting user:', error);
      return false;
    }
  },
  
  getUser: async (userId) => {
    try {
      const data = await redis.get(`user:${userId}`);
      return data ? JSON.parse(data) : null;
    } catch (error) {
      console.error('Error getting user:', error);
      return null;
    }
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
function getMainMenu() {
  return Markup.keyboard([
    ['üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞', 'üöª –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'],
    ['üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞', 'üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞'],
    ['üìú –ü—Ä–∞–≤–∏–ª–∞', '‚ùå –í—ã—Ö–æ–¥']
  ]).resize();
}

// –ö–æ–º–∞–Ω–¥–∞ /start - –Ω–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
bot.command('start', async (ctx) => {
  try {
    const userId = ctx.from.id;
    
    let user = await redisHelpers.getUser(userId);
    
    if (!user) {
      user = {
        id: userId,
        username: ctx.from.username || `user_${userId}`,
        first_name: ctx.from.first_name,
        last_name: ctx.from.last_name || '',
        acceptedTerms: false,
        ageVerified: false,
        searchesLeft: CONFIG.FREE_SEARCH_LIMIT,
        premium: false,
        createdAt: new Date().toISOString()
      };
      
      await redisHelpers.setUser(userId, user);
    }
    
    if (!user.ageVerified) {
      await ctx.reply(
        `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–Ω–æ–Ω–∏–º–Ω—ã–π –ß–∞—Ç!\n\n` +
        `–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –≤–∞–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 18 –ª–µ—Ç.\n\n` +
        `–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –≤–∞–º –µ—Å—Ç—å 18 –ª–µ—Ç?`,
        Markup.inlineKeyboard([
          [Markup.button.callback('‚úÖ –î–∞, –º–Ω–µ –µ—Å—Ç—å 18 –ª–µ—Ç', 'age_confirm_yes')],
          [Markup.button.callback('‚ùå –ù–µ—Ç', 'age_confirm_no')]
        ])
      );
      return;
    }
    
    if (!user.acceptedTerms) {
      await ctx.reply(
        `üìã –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å –Ω–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞.\n\n` +
        `–°–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏?`,
        Markup.inlineKeyboard([
          [Markup.button.callback('‚úÖ –ü—Ä–∏–Ω–∏–º–∞—é', 'terms_accept')],
          [Markup.button.callback('‚ùå –ù–µ –ø—Ä–∏–Ω–∏–º–∞—é', 'terms_decline')]
        ])
      );
      return;
    }
    
    if (!user.gender) {
      await ctx.reply(
        'üöª –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:',
        Markup.inlineKeyboard([
          [Markup.button.callback('üë® –ú—É–∂—Å–∫–æ–π', 'gender_male')],
          [Markup.button.callback('üë© –ñ–µ–Ω—Å–∫–∏–π', 'gender_female')]
        ])
      );
      return;
    }
    
    const welcomeMessage = `‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–Ω–æ–Ω–∏–º–Ω—ã–π –ß–∞—Ç!\n\n` +
      `üîç –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤: ${user.searchesLeft}\n` +
      `üíé –°—Ç–∞—Ç—É—Å: ${user.premium ? '–ü—Ä–µ–º–∏—É–º' : '–û–±—ã—á–Ω—ã–π'}\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    await ctx.reply(welcomeMessage, getMainMenu());
  } catch (error) {
    console.error('Error in start command:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞
bot.action('age_confirm_yes', async (ctx) => {
  try {
    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∑–∞–ø—Ä–æ—Å
    await ctx.answerCbQuery();
    
    const userId = ctx.from.id;
    const user = await redisHelpers.getUser(userId);
    
    if (user) {
      user.ageVerified = true;
      await redisHelpers.setUser(userId, user);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.reply(
        `üìã –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å –Ω–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞.\n\n` +
        `–°–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏?`,
        Markup.inlineKeyboard([
          [Markup.button.callback('‚úÖ –ü—Ä–∏–Ω–∏–º–∞—é', 'terms_accept')],
          [Markup.button.callback('‚ùå –ù–µ –ø—Ä–∏–Ω–∏–º–∞—é', 'terms_decline')]
        ])
      );
    }
  } catch (error) {
    console.error('Error in age confirmation:', error);
    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

bot.action('age_confirm_no', async (ctx) => {
  try {
    await ctx.answerCbQuery();
    await ctx.reply('‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
  } catch (error) {
    console.error('Error in age rejection:', error);
    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∞–≤–∏–ª
bot.action('terms_accept', async (ctx) => {
  try {
    await ctx.answerCbQuery();
    
    const userId = ctx.from.id;
    const user = await redisHelpers.getUser(userId);
    
    if (user) {
      user.acceptedTerms = true;
      await redisHelpers.setUser(userId, user);
      
      await ctx.reply(
        'üöª –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:',
        Markup.inlineKeyboard([
          [Markup.button.callback('üë® –ú—É–∂—Å–∫–æ–π', 'gender_male')],
          [Markup.button.callback('üë© –ñ–µ–Ω—Å–∫–∏–π', 'gender_female')]
        ])
      );
    }
  } catch (error) {
    console.error('Error in terms acceptance:', error);
    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

bot.action('terms_decline', async (ctx) => {
  try {
    await ctx.answerCbQuery();
    await ctx.reply('‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ - –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
  } catch (error) {
    console.error('Error in terms rejection:', error);
    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
bot.action(/^gender_(male|female)$/, async (ctx) => {
  try {
    await ctx.answerCbQuery();
    
    const gender = ctx.match[1];
    const userId = ctx.from.id;
    const user = await redisHelpers.getUser(userId);
    
    if (user) {
      user.gender = gender;
      await redisHelpers.setUser(userId, user);
      
      const welcomeMessage = `‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–Ω–æ–Ω–∏–º–Ω—ã–π –ß–∞—Ç!\n\n` +
        `üîç –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤: ${user.searchesLeft}\n` +
        `üíé –°—Ç–∞—Ç—É—Å: ${user.premium ? '–ü—Ä–µ–º–∏—É–º' : '–û–±—ã—á–Ω—ã–π'}\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
      
      await ctx.reply(welcomeMessage, getMainMenu());
    }
  } catch (error) {
    console.error('Error in gender selection:', error);
    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const text = ctx.message.text;
    const user = await redisHelpers.getUser(userId);
    
    if (!user) {
      return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start');
    }
    
    switch (text) {
      case 'üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞':
        await ctx.reply('üîç –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º.');
        break;
      case 'üöª –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å':
        const profileText = `üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n` +
          `–ò–º—è: ${user.first_name}${user.last_name ? ' ' + user.last_name : ''}\n` +
          `–ü–æ–ª: ${user.gender === 'male' ? 'üë® –ú—É–∂—Å–∫–æ–π' : 'üë© –ñ–µ–Ω—Å–∫–∏–π'}\n` +
          `–°—Ç–∞—Ç—É—Å: ${user.premium ? 'üíé –ü—Ä–µ–º–∏—É–º' : 'üîì –û–±—ã—á–Ω—ã–π'}\n` +
          `–ü–æ–∏—Å–∫–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: ${user.searchesLeft}\n` +
          `–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${new Date(user.createdAt).toLocaleDateString('ru-RU')}`;
        
        await ctx.reply(profileText, getMainMenu());
        break;
      case 'üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞':
        await ctx.reply(
          `üíé –ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞ - ${CONFIG.PREMIUM_COST} —Ä—É–±.\n\n` +
          `–î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: @admin`
        );
        break;
      case 'üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞':
        await ctx.reply(`üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞\n\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å: ${CONFIG.SUPPORT_URL}`);
        break;
      case 'üìú –ü—Ä–∞–≤–∏–ª–∞':
        await ctx.reply('üìú –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n\n1. –ë—ã—Ç—å –≤–µ–∂–ª–∏–≤—ã–º\n2. –ù–µ —Å–ø–∞–º–∏—Ç—å\n3. –£–≤–∞–∂–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤');
        break;
      case '‚ùå –í—ã—Ö–æ–¥':
        await ctx.reply('–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
        break;
      default:
        await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏', getMainMenu());
    }
  } catch (error) {
    console.error('Error in text processing:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Vercel
module.exports = async (req, res) => {
  try {
    if (req.method === 'POST') {
      await bot.handleUpdate(req.body, res);
    } else {
      res.status(200).json({ 
        status: 'active',
        service: 'Anonymous Chat Bot',
        version: '3.0'
      });
    }
  } catch (err) {
    console.error('Error:', err);
    res.status(500).json({ error: 'Internal error' });
  }
};

console.log('Anonymous Chat Bot started');