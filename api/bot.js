const { Telegraf, Markup } = require('telegraf');
const NodeCache = require('node-cache');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞
const cache = new NodeCache({ stdTTL: 3600, checkperiod: 600 });

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  ADMIN_ID: process.env.ADMIN_ID || 5948326124,
  FREE_SEARCH_LIMIT: 3,
  PREMIUM_COST: 100,
  SESSION_TIMEOUT: 600000,
  CHAT_TIMEOUT: 3600000,
  // URLs –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  TERMS_URL: 'https://yourwebsite.com/terms',
  PRIVACY_URL: 'https://yourwebsite.com/privacy',
  SUPPORT_URL: 'https://t.me/your_support'
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN, {
  telegram: { webhookReply: false }
});

// –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î)
const userData = new Map();
const activeChats = new Map();
const searchQueue = {
  male: [],
  female: [],
  any: []
};

// –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
const USER_STATE = {
  START: 'start',
  AGE_VERIFICATION: 'age_verification',
  TERMS_ACCEPTANCE: 'terms_acceptance',
  PROFILE_SETUP: 'profile_setup',
  MAIN_MENU: 'main_menu',
  SEARCHING: 'searching',
  IN_CHAT: 'in_chat'
};

// –¢–µ–∫—Å—Ç—ã –¥–ª—è —Å–æ–≥–ª–∞—à–µ–Ω–∏–π
const LEGAL_TEXTS = {
  terms: `üìú *–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ï –°–û–ì–õ–ê–®–ï–ù–ò–ï*

1. *–û–ë–©–ò–ï –ü–û–õ–û–ñ–ï–ù–ò–Ø*
1.1. –ù–∞—Å—Ç–æ—è—â–µ–µ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è –º–µ–∂–¥—É –í–∞–º–∏ –∏ –°–µ—Ä–≤–∏—Å–æ–º.
1.2. –ò—Å–ø–æ–ª—å–∑—É—è –°–µ—Ä–≤–∏—Å, –í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –°–æ–≥–ª–∞—à–µ–Ω–∏—è.

2. *–ü–†–ê–í–ò–õ–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –°–ï–†–í–ò–°–ê*
2.1. –°–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ª–∏—Ü —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç.
2.2. –ó–∞–ø—Ä–µ—â–µ–Ω–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–æ–ø—Ä–∞–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
2.3. –ó–∞–ø—Ä–µ—â–µ–Ω—ã –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, —É–≥—Ä–æ–∑—ã –∏ –¥–æ–º–æ–≥–∞—Ç–µ–ª—å—Å—Ç–≤–∞.

3. *–ö–û–ù–§–ò–î–ï–ù–¶–ò–ê–õ–¨–ù–û–°–¢–¨*
3.1. –ú—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∞—à–µ–π –ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.

–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è: ${CONFIG.TERMS_URL}`,

  privacy: `üîí *–ü–û–õ–ò–¢–ò–ö–ê –ö–û–ù–§–ò–î–ï–ù–¶–ò–ê–õ–¨–ù–û–°–¢–ò*

1. *–ö–ê–ö–ò–ï –î–ê–ù–ù–´–ï –ú–´ –°–û–ë–ò–†–ê–ï–ú*
- –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Telegram
- –ü–æ–ª (–¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π)
- –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏

2. *–ö–ê–ö –ò–°–ü–û–õ–¨–ó–£–ï–ú –î–ê–ù–ù–´–ï*
- –î–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥ —á–∞—Ç–∞
- –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
- –î–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞

3. *–í–ê–®–ò –ü–†–ê–í–ê*
- –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
- –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö

–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è: ${CONFIG.PRIVACY_URL}`
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
function getMainMenu(userId) {
  const user = userData.get(userId);
  const isPremium = user && user.premium;
  const searchesLeft = user ? user.searchesLeft : 0;
  
  return Markup.keyboard([
    ['üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞', 'üöª –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'],
    ['üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞', 'üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞'],
    ['üìú –ü—Ä–∞–≤–∏–ª–∞', '‚ùå –í—ã—Ö–æ–¥']
  ]).resize();
}

// –ö–æ–º–∞–Ω–¥–∞ /start - –Ω–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
bot.command('start', async (ctx) => {
  const userId = ctx.from.id;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
  if (!userData.has(userId)) {
    // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞
    userData.set(userId, {
      state: USER_STATE.AGE_VERIFICATION,
      id: userId,
      username: ctx.from.username || `user_${userId}`,
      first_name: ctx.from.first_name,
      last_name: ctx.from.last_name,
      acceptedTerms: false,
      ageVerified: false,
      searchesLeft: CONFIG.FREE_SEARCH_LIMIT,
      premium: false,
      createdAt: new Date()
    });
  }
  
  const user = userData.get(userId);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  if (!user.ageVerified) {
    user.state = USER_STATE.AGE_VERIFICATION;
    userData.set(userId, user);
    
    return ctx.replyWithMarkdown(
      `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ß–∞—Ç*!\n\n` +
      `–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –≤–∞–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å *–Ω–µ –º–µ–Ω–µ–µ 18 –ª–µ—Ç*.\n\n` +
      `–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –≤–∞–º –µ—Å—Ç—å 18 –ª–µ—Ç?`,
      Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –î–∞, –º–Ω–µ –µ—Å—Ç—å 18 –ª–µ—Ç', 'age_confirm_yes')],
        [Markup.button.callback('‚ùå –ù–µ—Ç', 'age_confirm_no')]
      ])
    );
  }
  
  // –ü—Ä–∏–Ω—è—Ç–∏–µ —É—Å–ª–æ–≤–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  if (!user.acceptedTerms) {
    user.state = USER_STATE.TERMS_ACCEPTANCE;
    userData.set(userId, user);
    
    return ctx.replyWithMarkdown(
      `üìã –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å –Ω–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞:\n\n${LEGAL_TEXTS.terms}\n\n` +
      `–°–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏?`,
      Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –ü—Ä–∏–Ω–∏–º–∞—é', 'terms_accept')],
        [Markup.button.callback('‚ùå –ù–µ –ø—Ä–∏–Ω–∏–º–∞—é', 'terms_decline')]
      ])
    );
  }
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
  if (!user.gender) {
    user.state = USER_STATE.PROFILE_SETUP;
    userData.set(userId, user);
    
    return ctx.reply(
      'üöª –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:',
      Markup.inlineKeyboard([
        [Markup.button.callback('üë® –ú—É–∂—Å–∫–æ–π', 'gender_male')],
        [Markup.button.callback('üë© –ñ–µ–Ω—Å–∫–∏–π', 'gender_female')]
      ])
    );
  }
  
  // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  user.state = USER_STATE.MAIN_MENU;
  userData.set(userId, user);
  
  const welcomeMessage = `‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ß–∞—Ç*!\n\n` +
    `üîç –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤: ${user.searchesLeft}\n` +
    `üíé –°—Ç–∞—Ç—É—Å: ${user.premium ? '–ü—Ä–µ–º–∏—É–º' : '–û–±—ã—á–Ω—ã–π'}\n\n` +
    `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  
  ctx.replyWithMarkdown(welcomeMessage, getMainMenu(userId));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞
bot.action('age_confirm_yes', async (ctx) => {
  const userId = ctx.from.id;
  const user = userData.get(userId);
  
  if (user) {
    user.ageVerified = true;
    user.state = USER_STATE.TERMS_ACCEPTANCE;
    userData.set(userId, user);
    
    try {
      await ctx.deleteMessage();
    } catch (e) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', e.message);
    }
    
    ctx.replyWithMarkdown(
      `üìã –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å –Ω–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞:\n\n${LEGAL_TEXTS.terms}\n\n` +
      `–°–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏?`,
      Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –ü—Ä–∏–Ω–∏–º–∞—é', 'terms_accept')],
        [Markup.button.callback('‚ùå –ù–µ –ø—Ä–∏–Ω–∏–º–∞—é', 'terms_decline')]
      ])
    );
  }
});

bot.action('age_confirm_no', async (ctx) => {
  try {
    await ctx.deleteMessage();
  } catch (e) {
    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', e.message);
  }
  
  ctx.reply('‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∞–≤–∏–ª
bot.action('terms_accept', async (ctx) => {
  const userId = ctx.from.id;
  const user = userData.get(userId);
  
  if (user) {
    user.acceptedTerms = true;
    user.state = USER_STATE.PROFILE_SETUP;
    userData.set(userId, user);
    
    try {
      await ctx.deleteMessage();
    } catch (e) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', e.message);
    }
    
    ctx.reply(
      'üöª –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:',
      Markup.inlineKeyboard([
        [Markup.button.callback('üë® –ú—É–∂—Å–∫–æ–π', 'gender_male')],
        [Markup.button.callback('üë© –ñ–µ–Ω—Å–∫–∏–π', 'gender_female')]
      ])
    );
  }
});

bot.action('terms_decline', async (ctx) => {
  try {
    await ctx.deleteMessage();
  } catch (e) {
    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', e.message);
  }
  
  ctx.reply('‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ - –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
bot.action(/^gender_(male|female)$/, async (ctx) => {
  const gender = ctx.match[1];
  const userId = ctx.from.id;
  const user = userData.get(userId);
  
  if (user) {
    user.gender = gender;
    user.state = USER_STATE.MAIN_MENU;
    userData.set(userId, user);
    
    try {
      await ctx.deleteMessage();
    } catch (e) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', e.message);
    }
    
    const welcomeMessage = `‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ß–∞—Ç*!\n\n` +
      `üîç –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤: ${user.searchesLeft}\n` +
      `üíé –°—Ç–∞—Ç—É—Å: ${user.premium ? '–ü—Ä–µ–º–∏—É–º' : '–û–±—ã—á–Ω—ã–π'}\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    
    ctx.replyWithMarkdown(welcomeMessage, getMainMenu(userId));
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  const userId = ctx.from.id;
  const text = ctx.message.text;
  const user = userData.get(userId);
  
  if (!user) {
    return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ
  if (user.state === USER_STATE.IN_CHAT) {
    const chat = activeChats.get(userId);
    if (chat && chat.partnerId) {
      try {
        // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—É
        await ctx.telegram.sendMessage(chat.partnerId, `üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:\n\n${text}\n\n/stopp - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥`);
        ctx.reply('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      } catch (error) {
        ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞.');
        endChat(chat.chatId);
      }
    }
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
  switch (text) {
    case 'üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞':
      handleSearch(ctx);
      break;
    case 'üöª –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å':
      showProfile(ctx);
      break;
    case 'üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞':
      showPremiumInfo(ctx);
      break;
    case 'üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞':
      ctx.replyWithMarkdown(`üÜò *–ü–æ–¥–¥–µ—Ä–∂–∫–∞*\n\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å: ${CONFIG.SUPPORT_URL}`);
      break;
    case 'üìú –ü—Ä–∞–≤–∏–ª–∞':
      ctx.replyWithMarkdown(LEGAL_TEXTS.terms);
      break;
    case '‚ùå –í—ã—Ö–æ–¥':
      ctx.reply('–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
      break;
    default:
      ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏', getMainMenu(userId));
  }
});

// –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
function handleSearch(ctx) {
  const userId = ctx.from.id;
  const user = userData.get(userId);
  
  if (!user || !user.gender) {
    return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å', getMainMenu(userId));
  }
  
  if (user.searchesLeft <= 0 && !user.premium) {
    return ctx.replyWithMarkdown(
      `‚ùå –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω\n\n` +
      `üíé –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞`,
      Markup.inlineKeyboard([
        [Markup.button.callback('üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞', 'premium_info')],
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_search')]
      ])
    );
  }
  
  // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–æ–≤ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  if (!user.premium) {
    user.searchesLeft--;
    userData.set(userId, user);
  }
  
  user.state = USER_STATE.SEARCHING;
  userData.set(userId, user);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞
  if (user.premium) {
    ctx.reply(
      'üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:',
      Markup.inlineKeyboard([
        [Markup.button.callback('üéØ –ü–æ –ø–æ–ª—É', 'search_by_gender')],
        [Markup.button.callback('üé≤ –°–ª—É—á–∞–π–Ω—ã–π', 'search_random')],
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_search')]
      ])
    );
  } else {
    ctx.reply(
      'üîç –ò—â–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...\n\n/stopp - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫',
      Markup.inlineKeyboard([
        [Markup.button.callback('‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫', 'cancel_search')]
      ])
    );
    findChatPartner(userId, 'any');
  }
}

// –ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è
function showProfile(ctx) {
  const userId = ctx.from.id;
  const user = userData.get(userId);
  
  if (!user) {
    return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start');
  }
  
  const profileText = `üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n` +
    `–ò–º—è: ${user.first_name}${user.last_name ? ' ' + user.last_name : ''}\n` +
    `–ü–æ–ª: ${user.gender === 'male' ? 'üë® –ú—É–∂—Å–∫–æ–π' : 'üë© –ñ–µ–Ω—Å–∫–∏–π'}\n` +
    `–°—Ç–∞—Ç—É—Å: ${user.premium ? 'üíé –ü—Ä–µ–º–∏—É–º' : 'üîì –û–±—ã—á–Ω—ã–π'}\n` +
    `–ü–æ–∏—Å–∫–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: ${user.searchesLeft}\n` +
    `–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${user.createdAt.toLocaleDateString('ru-RU')}`;
  
  ctx.replyWithMarkdown(profileText, getMainMenu(userId));
}

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–µ
function showPremiumInfo(ctx) {
  const userId = ctx.from.id;
  const user = userData.get(userId);
  
  if (user && user.premium) {
    return ctx.replyWithMarkdown(
      `üíé *–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞!*\n\n` +
      `‚ú® –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n` +
      `‚Ä¢ üöª –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É\n` +
      `‚Ä¢ ‚ôæÔ∏è –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫\n` +
      `‚Ä¢ ‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏`,
      getMainMenu(userId)
    );
  }
  
  ctx.replyWithMarkdown(
    `üíé *–ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞* - ${CONFIG.PREMIUM_COST} —Ä—É–±.\n\n` +
    `‚ú® *–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:*\n` +
    `‚Ä¢ üöª –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É (–º—É–∂—Å–∫–æ–π/–∂–µ–Ω—Å–∫–∏–π)\n` +
    `‚Ä¢ ‚ôæÔ∏è –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–æ–≤\n` +
    `‚Ä¢ ‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–∏—Å–∫–∞\n\n` +
    `üí≥ –î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: @admin`,
    Markup.inlineKeyboard([
      [Markup.button.callback('üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'buy_premium')],
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_premium')]
    ])
  );
}

// –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –ø–æ –ø–æ–ª—É (–ø—Ä–µ–º–∏—É–º)
bot.action('search_by_gender', async (ctx) => {
  const userId = ctx.from.id;
  const user = userData.get(userId);
  
  if (!user || !user.premium) {
    try {
      await ctx.deleteMessage();
    } catch (e) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', e.message);
    }
    return ctx.reply('‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º');
  }
  
  try {
    await ctx.deleteMessage();
  } catch (e) {
    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', e.message);
  }
  
  ctx.reply(
    'üöª –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –¥–ª—è –ø–æ–∏—Å–∫–∞:',
    Markup.inlineKeyboard([
      [Markup.button.callback('üë® –ú—É–∂—Å–∫–æ–π', 'find_male')],
      [Markup.button.callback('üë© –ñ–µ–Ω—Å–∫–∏–π', 'find_female')],
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_search')]
    ])
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
bot.action(/^find_(male|female)$/, async (ctx) => {
  const gender = ctx.match[1];
  const userId = ctx.from.id;
  
  try {
    await ctx.deleteMessage();
  } catch (e) {
    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', e.message);
  }
  
  ctx.reply(
    `üîç –ò—â–µ–º ${gender === 'male' ? 'üë® –º—É–∂—á–∏–Ω—É' : 'üë© –∂–µ–Ω—â–∏–Ω—É'}...\n\n/stopp - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫`,
    Markup.inlineKeyboard([
      [Markup.button.callback('‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫', 'cancel_search')]
    ])
  );
  
  findChatPartner(userId, gender);
});

// –°–ª—É—á–∞–π–Ω—ã–π –ø–æ–∏—Å–∫
bot.action('search_random', async (ctx) => {
  const userId = ctx.from.id;
  
  try {
    await ctx.deleteMessage();
  } catch (e) {
    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', e.message);
  }
  
  ctx.reply(
    'üîç –ò—â–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...\n\n/stopp - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫',
    Markup.inlineKeyboard([
      [Markup.button.callback('‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫', 'cancel_search')]
    ])
  );
  
  findChatPartner(userId, 'any');
});

// –û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞
bot.action('cancel_search', async (ctx) => {
  const userId = ctx.from.id;
  const user = userData.get(userId);
  
  if (user) {
    user.state = USER_STATE.MAIN_MENU;
    userData.set(userId, user);
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–∏—Å–∫–∞
    removeFromSearchQueues(userId);
  }
  
  try {
    await ctx.deleteMessage();
  } catch (e) {
    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', e.message);
  }
  
  ctx.reply('‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω', getMainMenu(userId));
});

// –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
function findChatPartner(userId, targetGender) {
  const user = userData.get(userId);
  if (!user) return;
  
  const queue = searchQueue[targetGender];
  
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏
  if (queue.includes(userId)) {
    return;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
  queue.push(userId);
  
  // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
  if (queue.length >= 2) {
    const partnerId = queue.find(id => id !== userId);
    if (partnerId) {
      // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
      const index = queue.indexOf(partnerId);
      if (index > -1) queue.splice(index, 1);
      const userIndex = queue.indexOf(userId);
      if (userIndex > -1) queue.splice(userIndex, 1);
      
      // –°–æ–∑–¥–∞–µ–º —á–∞—Ç
      createChat(userId, partnerId);
    }
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞
function createChat(user1Id, user2Id) {
  const chatId = `${user1Id}_${user2Id}_${Date.now()}`;
  
  const user1 = userData.get(user1Id);
  const user2 = userData.get(user2Id);
  
  if (!user1 || !user2) return;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  user1.state = USER_STATE.IN_CHAT;
  user2.state = USER_STATE.IN_CHAT;
  userData.set(user1Id, user1);
  userData.set(user2Id, user2);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
  activeChats.set(user1Id, { partnerId: user2Id, chatId });
  activeChats.set(user2Id, { partnerId: user1Id, chatId });
  
  // –¢–∞–π–º–∞—É—Ç —á–∞—Ç–∞
  const timeout = setTimeout(() => {
    endChat(chatId);
  }, CONFIG.CHAT_TIMEOUT);
  
  cache.set(`chat_${chatId}`, timeout);
  
  // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const user1Gender = user1.gender === 'male' ? 'üë®' : 'üë©';
  const user2Gender = user2.gender === 'male' ? 'üë®' : 'üë©';
  
  bot.telegram.sendMessage(
    user1Id, 
    `üí¨ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! (${user2Gender})\n\n` +
    `‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...\n` +
    `/stopp - –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥`,
    Markup.keyboard(['/stopp']).resize()
  );
  
  bot.telegram.sendMessage(
    user2Id, 
    `üí¨ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! (${user1Gender})\n\n` +
    `‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...\n` +
    `/stopp - –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥`,
    Markup.keyboard(['/stopp']).resize()
  );
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–∞—Ç–∞
function endChat(chatId) {
  const [user1Id, user2Id] = chatId.split('_');
  const id1 = parseInt(user1Id);
  const id2 = parseInt(user2Id);
  
  const user1 = userData.get(id1);
  const user2 = userData.get(id2);
  
  if (user1) {
    user1.state = USER_STATE.MAIN_MENU;
    userData.set(id1, user1);
  }
  
  if (user2) {
    user2.state = USER_STATE.MAIN_MENU;
    userData.set(id2, user2);
  }
  
  activeChats.delete(id1);
  activeChats.delete(id2);
  
  const timeout = cache.get(`chat_${chatId}`);
  if (timeout) {
    clearTimeout(timeout);
    cache.del(`chat_${chatId}`);
  }
  
  bot.telegram.sendMessage(id1, '‚ùå –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω', getMainMenu(id1));
  bot.telegram.sendMessage(id2, '‚ùå –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω', getMainMenu(id2));
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π –ø–æ–∏—Å–∫–∞
function removeFromSearchQueues(userId) {
  Object.keys(searchQueue).forEach(gender => {
    const index = searchQueue[gender].indexOf(userId);
    if (index > -1) {
      searchQueue[gender].splice(index, 1);
    }
  });
}

// –ö–æ–º–∞–Ω–¥–∞ /stopp –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∏–∞–ª–æ–≥–∞ –∏–ª–∏ –ø–æ–∏—Å–∫–∞
bot.command('stopp', (ctx) => {
  const userId = ctx.from.id;
  const user = userData.get(userId);
  
  if (!user) {
    return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start');
  }
  
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ
  if (user.state === USER_STATE.IN_CHAT) {
    const chat = activeChats.get(userId);
    if (chat) {
      endChat(chat.chatId);
      ctx.reply('‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω', getMainMenu(userId));
    } else {
      user.state = USER_STATE.MAIN_MENU;
      userData.set(userId, user);
      ctx.reply('‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω', getMainMenu(userId));
    }
    return;
  }
  
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø–æ–∏—Å–∫–µ
  if (user.state === USER_STATE.SEARCHING) {
    user.state = USER_STATE.MAIN_MENU;
    userData.set(userId, user);
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–∏—Å–∫–∞
    removeFromSearchQueues(userId);
    
    ctx.reply('‚úÖ –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', getMainMenu(userId));
    return;
  }
  
  ctx.reply('‚ùå –°–µ–π—á–∞—Å –Ω–µ—á–µ–≥–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å', getMainMenu(userId));
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Vercel
module.exports = async (req, res) => {
  try {
    if (req.method === 'POST') {
      await bot.handleUpdate(req.body, res);
    } else {
      res.status(200).json({ 
        status: 'active',
        service: 'Anonymous Chat Bot',
        version: '2.0',
        users: userData.size,
        activeChats: activeChats.size
      });
    }
  } catch (err) {
    console.error('Error:', err);
    res.status(500).json({ error: 'Internal error' });
  }
};

console.log('Anonymous Chat Bot started');
