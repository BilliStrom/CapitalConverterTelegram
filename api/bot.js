const { Telegraf, Markup } = require('telegraf');
const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  MIN_AMOUNT_USD: 10, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤ –¥–æ–ª–ª–∞—Ä–æ–≤–æ–º —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–µ
  ORDER_EXPIRY_MINUTES: 60, // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –æ—Ä–¥–µ—Ä–∞
  RATES_UPDATE_INTERVAL: 30, // –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ (–º–∏–Ω—É—Ç—ã)
  SESSION_TIMEOUT: 600000, // 10 –º–∏–Ω—É—Ç –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
};

// –§–∏–∫—Å –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤
process.env.NTBA_FIX_319 = "1";
process.env.NTBA_FIX_350 = "1";

const bot = new Telegraf(process.env.BOT_TOKEN, {
  telegram: { webhookReply: false }
});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –∏ –¥–∞–Ω–Ω—ã—Ö
const userSessions = {};
let exchangeRates = {};
let lastRatesUpdate = 0;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–π —Å —Ç–∞–π–º–∞—É—Ç–æ–º
bot.use((ctx, next) => {
  const userId = ctx.from?.id;
  if (!userId) return next();
  
  if (!userSessions[userId]) {
    userSessions[userId] = {
      data: {},
      timer: setTimeout(() => {
        delete userSessions[userId];
        console.log(`–°–µ—Å—Å–∏—è –¥–ª—è ${userId} –æ—á–∏—â–µ–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É`);
      }, CONFIG.SESSION_TIMEOUT)
    };
  }
  
  // –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  clearTimeout(userSessions[userId].timer);
  userSessions[userId].timer = setTimeout(() => {
    delete userSessions[userId];
    console.log(`–°–µ—Å—Å–∏—è –¥–ª—è ${userId} –æ—á–∏—â–µ–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É`);
  }, CONFIG.SESSION_TIMEOUT);
  
  ctx.session = userSessions[userId].data;
  return next();
});

// –î–∞–Ω–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
const cryptoData = {
  BTC: { name: "Bitcoin", wallet: "bc1qre7z0r3jpkaqtcr3wv5lvvy78u578xkmap9r7l", min: 0.001 },
  ETH: { name: "Ethereum", wallet: "0xCcd1e4947C45B1c22c46d59F16D34be4441377B8", min: 0.01 },
  USDT: { name: "Tether", wallet: "0xCcd1e4947C45B1c22c46d59F16D34be4441377B8", min: 10 },
  LTC: { name: "Litecoin", wallet: "ltc1qjhaut8kw9e450s6k9fa82seqykg4xcu0zfqxc8", min: 0.1 },
  BNB: { name: "Binance Coin", wallet: "0xCcd1e4947C45B1c22c46d59F16D34be4441377B8", min: 0.1 },
  XRP: { name: "Ripple", wallet: "rM73La2rNE3SP6WbTvAuxGUmUsGN4YjJET", min: 10 },
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—É—Ä—Å–æ–≤
const initExchangeRates = async () => {
  try {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ API, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    // const response = await axios.get('https://api.binance.com/api/v3/ticker/price');
    exchangeRates = {
      BTC_USDT: 106368,
      ETH_USDT: 2575.78,
      LTC_USDT: 86.83,
      BTC_ETH:  41.3,
      ETH_BTC: 0.024213,
      LTC_BTC: 0.000816,
      BTC_LTC: 1226.11,
      ETH_LTC: 29.69,
      BNB_USDT: 652.92,
      XRP_USDT: 2.18,
      BTC_BNB: 163.02,
      ETH_BNB: 3.95,
    };
    lastRatesUpdate = Date.now();
    console.log('–ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤:', error);
  }
};

// –ö–æ–º–∞–Ω–¥—ã
bot.command('start', (ctx) => {
  const welcomeMessage = `üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *Crypto Exchange Bot*!
  
–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ–±–º–µ–Ω—è—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –ø–æ –≤—ã–≥–æ–¥–Ω–æ–º—É –∫—É—Ä—Å—É. 

üìä *–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã:*
${Object.entries(cryptoData)
  .filter(([symbol]) => exchangeRates[`${symbol}_USDT`])
  .map(([symbol, data]) => `1 ${symbol} = ${exchangeRates[`${symbol}_USDT`]} USDT`)
  .join('\n')}

üí± –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±–º–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /exchange
üÜò –ü–æ–º–æ—â—å: /help`;

  ctx.replyWithMarkdown(welcomeMessage);
});

bot.command('rates', (ctx) => {
  const ratesMessage = `üìà *–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã:*
${Object.entries(cryptoData)
  .filter(([symbol]) => exchangeRates[`${symbol}_USDT`])
  .map(([symbol, data]) => `1 ${symbol} = ${exchangeRates[`${symbol}_USDT`]} USDT`)
  .join('\n')}\n\n*–û–±–Ω–æ–≤–ª–µ–Ω–æ:* ${new Date(lastRatesUpdate).toLocaleTimeString()}`;

  ctx.replyWithMarkdown(ratesMessage);
});

bot.command('exchange', (ctx) => {
  ctx.session.step = 'select_pair';
  showExchangeMenu(ctx);
});

bot.command('cancel', (ctx) => {
  if (ctx.session.step && ctx.session.step !== 'idle') {
    clearUserSession(ctx);
    ctx.reply('‚ùå –¢–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
  } else {
    ctx.reply('‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã');
  }
});

bot.command('help', (ctx) => {
  ctx.replyWithMarkdown(`
‚ùì *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:*
  
üí± *–û–±–º–µ–Ω –≤–∞–ª—é—Ç:*
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /exchange
2. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è –æ–±–º–µ–Ω–∞
3. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É
4. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
5. –ü—Ä–∏—à–ª–∏—Ç–µ TXID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏

üìä *–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç:*
- –û–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ ${CONFIG.RATES_UPDATE_INTERVAL} –º–∏–Ω—É—Ç
- –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /rates

‚è±Ô∏è *–í—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–π:*
- –ö—Ä–∏–ø—Ç–æ: 10-60 –º–∏–Ω—É—Ç
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞: 24/7
- –û—Ä–¥–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω: ${CONFIG.ORDER_EXPIRY_MINUTES} –º–∏–Ω—É—Ç

‚ö†Ô∏è *–í–∞–∂–Ω–æ:*
- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${CONFIG.MIN_AMOUNT_USD} USD —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç
- –ö–æ–º–∏—Å—Å–∏–∏ —Å–µ—Ç–∏ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
- –ê–¥—Ä–µ—Å–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —á–µ—Ä–µ–∑ —Å–∫–∞–Ω–µ—Ä QR-–∫–æ–¥–∞

üÜò *–ö–æ–º–∞–Ω–¥—ã:*
/exchange - –Ω–∞—á–∞—Ç—å –æ–±–º–µ–Ω
/rates - —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã
/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
/help - –ø–æ–º–æ—â—å`);
});

// –ú–µ–Ω—é –æ–±–º–µ–Ω–∞
function showExchangeMenu(ctx) {
  ctx.reply('üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞:', Markup.inlineKeyboard([
    [
      Markup.button.callback('BTC ‚Üí USDT', 'pair_BTC_USDT'),
      Markup.button.callback('ETH ‚Üí BTC', 'pair_ETH_BTC'),
    ],
    [
      Markup.button.callback('USDT ‚Üí ETH', 'pair_USDT_ETH'),
      Markup.button.callback('LTC ‚Üí BTC', 'pair_LTC_BTC'),
    ],
    [
      Markup.button.callback('–î—Ä—É–≥–∏–µ –ø–∞—Ä—ã', 'more_pairs'),
      Markup.button.callback('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings'),
    ]
  ]));
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
bot.action('more_pairs', (ctx) => {
  ctx.editMessageText('üîÄ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä—ã:', Markup.inlineKeyboard([
    [
      Markup.button.callback('ETH ‚Üí USDT', 'pair_ETH_USDT'),
      Markup.button.callback('BNB ‚Üí BTC', 'pair_BNB_BTC'),
    ],
    [
      Markup.button.callback('XRP ‚Üí ETH', 'pair_XRP_ETH'),
      Markup.button.callback('BTC ‚Üí BNB', 'pair_BTC_BNB'),
    ],
    [Markup.button.callback('‚Üê –ù–∞–∑–∞–¥', 'back_to_main')]
  ]));
});

bot.action('back_to_main', (ctx) => {
  ctx.session.step = 'select_pair';
  showExchangeMenu(ctx);
});

bot.action(/^pair_(\w+)_(\w+)$/, async (ctx) => {
  const [, from, to] = ctx.match;
  
  ctx.session.step = 'enter_amount';
  ctx.session.from = from.toUpperCase();
  ctx.session.to = to.toUpperCase();
  
  try {
    await ctx.deleteMessage();
  } catch (e) {
    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', e.message);
  }
  
  const minAmount = cryptoData[ctx.session.from]?.min || 0;
  ctx.reply(`üí± –í—ã –≤—ã–±—Ä–∞–ª–∏: ${ctx.session.from} ‚Üí ${ctx.session.to}\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É ${ctx.session.from} –¥–ª—è –æ–±–º–µ–Ω–∞${minAmount ? `\n(–ú–∏–Ω–∏–º—É–º: ${minAmount} ${ctx.session.from})` : ''}:`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞
bot.on('text', async (ctx) => {
  if (ctx.message.text.startsWith('/')) return;
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã
  if (ctx.session.step === 'enter_amount') {
    return handleAmountInput(ctx);
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ TXID
  if (ctx.session.step === 'confirm_txid') {
    return handleTxidInput(ctx);
  }
  
  ctx.reply('‚ÑπÔ∏è –î–ª—è –Ω–∞—á–∞–ª–∞ –æ–±–º–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /exchange');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
async function handleAmountInput(ctx) {
  const amount = parseFloat(ctx.message.text.replace(',', '.'));
  
  if (isNaN(amount)) {
    return ctx.reply('‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 0.5 –∏–ª–∏ 100');
  }
  
  const { from, to } = ctx.session;
  const minAmount = cryptoData[from]?.min || 0;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
  if (amount < minAmount) {
    return ctx.reply(`‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–±–º–µ–Ω–∞: ${minAmount} ${from}`);
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª–∫–∏ –≤ USD
  const usdRate = exchangeRates[`${from}_USDT`];
  if (usdRate && (amount * usdRate) < CONFIG.MIN_AMOUNT_USD) {
    return ctx.reply(`‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–±–º–µ–Ω–∞: ${(CONFIG.MIN_AMOUNT_USD / usdRate).toFixed(8)} ${from} (${CONFIG.MIN_AMOUNT_USD} USD)`);
  }
  
  const pair = `${from}_${to}`;
  if (!exchangeRates[pair]) {
    return ctx.reply('‚ùå –ö—É—Ä—Å –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
  }
  
  // –†–∞—Å—Å—á–µ—Ç —Å—É–º–º—ã
  const rate = exchangeRates[pair];
  const result = (amount * rate).toFixed(8);
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  ctx.session.order = {
    amount,
    from,
    to,
    rate,
    result,
    timestamp: Date.now()
  };
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–∞–ª—é—Ç–∞–º
  const fromCurrency = cryptoData[from] || { name: from };
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  const formattedAmount = formatCrypto(amount, from);
  const formattedResult = formatCrypto(result, to);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  ctx.replyWithMarkdown(`‚úÖ *–î–µ—Ç–∞–ª–∏ –æ–±–º–µ–Ω–∞:*
  
‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ: *${formattedAmount} ${from}* (${fromCurrency.name})
‚¨ÖÔ∏è –ü–æ–ª—É—á–∞–µ—Ç–µ: *${formattedResult} ${to}*
üìä –ö—É—Ä—Å: 1 ${from} = ${rate} ${to}

üí≥ *–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏:*
1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ ${formattedAmount} ${from} –Ω–∞ –∞–¥—Ä–µ—Å:
\`${fromCurrency.wallet}\`

2. –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏—à–ª–∏—Ç–µ TXID (—Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏) –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

‚è±Ô∏è –û—Ä–¥–µ—Ä –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω ${CONFIG.ORDER_EXPIRY_MINUTES} –º–∏–Ω—É—Ç`);

  ctx.session.step = 'confirm_txid';
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ TXID
function handleTxidInput(ctx) {
  const txid = ctx.message.text.trim();
  const { order } = ctx.session;
  
  if (!order) {
    return ctx.reply('‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–¥–µ—Ä–µ –ø–æ—Ç–µ—Ä—è–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /exchange');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ä–¥–µ—Ä–∞
  const orderAge = (Date.now() - order.timestamp) / 60000;
  if (orderAge > CONFIG.ORDER_EXPIRY_MINUTES) {
    clearUserSession(ctx);
    return ctx.reply('‚ùå –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –æ—Ä–¥–µ—Ä–∞ –∏—Å—Ç–µ–∫–ª–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /exchange');
  }
  
  const formattedAmount = formatCrypto(order.amount, order.from);
  const formattedResult = formatCrypto(order.result, order.to);
  
  ctx.replyWithMarkdown(`üì¨ *–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞!*
  
TXID: \`${txid}\`
–°—É–º–º–∞: ${formattedAmount} ${order.from}
–ö –ø–æ–ª—É—á–µ–Ω–∏—é: ${formattedResult} ${order.to}

–í–∞—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 10-30 –º–∏–Ω—É—Ç.

–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:
üîó [Blockchain Explorer](${getExplorerLink(order.from, txid)})

–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!`);

  // –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏
  clearUserSession(ctx);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function formatCrypto(value, currency) {
  const num = parseFloat(value);
  return num.toLocaleString('en', {
    minimumFractionDigits: 0,
    maximumFractionDigits: currency === 'BTC' ? 8 : 6
  });
}

function clearUserSession(ctx) {
  const userId = ctx.from?.id;
  if (userId && userSessions[userId]) {
    clearTimeout(userSessions[userId].timer);
    delete userSessions[userId];
  }
  ctx.session = {};
}

function getExplorerLink(currency, txid) {
  const explorers = {
    BTC: `https://blockchair.com/bitcoin/transaction/${txid}`,
    ETH: `https://etherscan.io/tx/${txid}`,
    USDT: `https://etherscan.io/tx/${txid}`,
    LTC: `https://blockchair.com/litecoin/transaction/${txid}`,
    BNB: `https://bscscan.com/tx/${txid}`,
    XRP: `https://xrpscan.com/tx/${txid}`,
  };
  return explorers[currency] || `https://blockchair.com/search?q=${txid}`;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Vercel
module.exports = async (req, res) => {
  try {
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤
    if (Date.now() - lastRatesUpdate > CONFIG.RATES_UPDATE_INTERVAL * 60000) {
      await initExchangeRates();
    }
    
    if (req.method === 'POST') {
      await bot.handleUpdate(req.body, res);
    } else {
      res.status(200).json({ 
        status: 'active',
        service: 'Crypto Exchange Bot',
        version: '2.0',
        currencies: Object.keys(cryptoData),
        last_rates_update: new Date(lastRatesUpdate).toISOString()
      });
    }
  } catch (err) {
    console.error('Global error:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
(async () => {
  await initExchangeRates();
  console.log('Crypto Exchange Bot started');
})();