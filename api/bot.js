const { Telegraf, Markup } = require('telegraf');

// –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞
const cache = {
  _store: new Map(),
  _timeouts: new Map(),
  set(key, value, ttl = 3600) {
    if (this._timeouts.has(key)) {
      clearTimeout(this._timeouts.get(key));
      this._timeouts.delete(key);
    }
    this._store.set(key, value);
    const timeout = setTimeout(() => {
      this._store.delete(key);
      this._timeouts.delete(key);
    }, ttl * 1000);
    this._timeouts.set(key, timeout);
  },
  get(key) {
    return this._store.get(key);
  },
  del(key) {
    if (this._timeouts.has(key)) {
      clearTimeout(this._timeouts.get(key));
      this._timeouts.delete(key);
    }
    this._store.delete(key);
  }
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  ADMIN_ID: 5948326124,
  FREE_SEARCH_LIMIT: 3,
  PREMIUM_COST: 100, // —Ä—É–±–ª–µ–π
  SESSION_TIMEOUT: 600000,
  CHAT_TIMEOUT: 3600000, // 1 —á–∞—Å –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN, {
  telegram: { webhookReply: false }
});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
const userData = new Map();
const activeChats = new Map();
const searchQueue = {
  male: [],
  female: [],
  any: []
};

// –°–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userSessions = {};

// Middleware –¥–ª—è —Å–µ—Å—Å–∏–π
bot.use((ctx, next) => {
  const userId = ctx.from?.id;
  if (!userId) return next();
  
  if (!userSessions[userId]) {
    userSessions[userId] = {
      data: { userId },
      timer: setTimeout(() => delete userSessions[userId], CONFIG.SESSION_TIMEOUT)
    };
  }
  
  clearTimeout(userSessions[userId].timer);
  userSessions[userId].timer = setTimeout(() => {
    delete userSessions[userId];
  }, CONFIG.SESSION_TIMEOUT);
  
  ctx.session = userSessions[userId].data;
  return next();
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', (ctx) => {
  const welcomeMessage = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ß–∞—Ç*!
  
‚ú® *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
üîç –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤
üöª –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—É
üíé –ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞
üéØ –¢–∞—Ä–≥–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫

üìã *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/profile - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
/search - –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥
/premium - –ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞
/help - –ü–æ–º–æ—â—å

üí¨ –ù–∞—á–Ω–∏—Ç–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∫–æ–º–∞–Ω–¥–æ–π /profile`;

  ctx.replyWithMarkdown(welcomeMessage);
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
bot.command('profile', (ctx) => {
  ctx.session.step = 'set_gender';
  ctx.reply('üöª –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:', Markup.inlineKeyboard([
    [Markup.button.callback('üë® –ú—É–∂—Å–∫–æ–π', 'gender_male')],
    [Markup.button.callback('üë© –ñ–µ–Ω—Å–∫–∏–π', 'gender_female')]
  ]));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
bot.action(/^gender_(male|female)$/, async (ctx) => {
  const gender = ctx.match[1];
  const userId = ctx.from.id;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (!userData.has(userId)) {
    userData.set(userId, {
      gender,
      premium: false,
      searchesLeft: CONFIG.FREE_SEARCH_LIMIT,
      createdAt: Date.now()
    });
  } else {
    const data = userData.get(userId);
    data.gender = gender;
    userData.set(userId, data);
  }
  
  cache.set(`user_${userId}`, gender);
  
  try {
    await ctx.deleteMessage();
  } catch (e) {
    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', e.message);
  }
  
  ctx.replyWithMarkdown(`‚úÖ –ü–æ–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${gender === 'male' ? 'üë® –ú—É–∂—Å–∫–æ–π' : 'üë© –ñ–µ–Ω—Å–∫–∏–π'}\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /search –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞`);
});

// –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
bot.command('search', (ctx) => {
  const userId = ctx.from.id;
  const user = userData.get(userId);
  
  if (!user || !user.gender) {
    return ctx.reply('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /profile');
  }
  
  if (user.searchesLeft <= 0 && !user.premium) {
    return ctx.replyWithMarkdown(`‚ùå –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω\n\nüíé –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:\n/premium`);
  }
  
  ctx.session.step = 'search_options';
  ctx.reply('üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:', Markup.inlineKeyboard([
    [Markup.button.callback('üéØ –ü–æ –ø–æ–ª—É', 'search_by_gender')],
    [Markup.button.callback('üé≤ –°–ª—É—á–∞–π–Ω—ã–π', 'search_random')],
    [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'search_cancel')]
  ]));
});

// –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É (–ø—Ä–µ–º–∏—É–º)
bot.action('search_by_gender', async (ctx) => {
  const userId = ctx.from.id;
  const user = userData.get(userId);
  
  if (!user.premium) {
    try {
      await ctx.deleteMessage();
    } catch (e) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', e.message);
    }
    return ctx.replyWithMarkdown(`‚ùå –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Å –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–æ–π\n\nüíé –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø—Ä–µ–º–∏—É–º:\n/premium`);
  }
  
  ctx.session.step = 'select_gender';
  ctx.reply('üöª –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –¥–ª—è –ø–æ–∏—Å–∫–∞:', Markup.inlineKeyboard([
    [Markup.button.callback('üë® –ú—É–∂—Å–∫–æ–π', 'find_male')],
    [Markup.button.callback('üë© –ñ–µ–Ω—Å–∫–∏–π', 'find_female')],
    [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'search_cancel')]
  ]));
});

// –°–ª—É—á–∞–π–Ω—ã–π –ø–æ–∏—Å–∫
bot.action('search_random', async (ctx) => {
  const userId = ctx.from.id;
  const user = userData.get(userId);
  
  // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–æ–≤ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  if (!user.premium) {
    user.searchesLeft--;
    userData.set(userId, user);
  }
  
  try {
    await ctx.deleteMessage();
  } catch (e) {
    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', e.message);
  }
  
  ctx.reply('üîç –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...');
  findChatPartner(userId, 'any');
});

// –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª–∞
bot.action(/^find_(male|female)$/, async (ctx) => {
  const gender = ctx.match[1];
  const userId = ctx.from.id;
  
  try {
    await ctx.deleteMessage();
  } catch (e) {
    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', e.message);
  }
  
  ctx.reply(`üîç –ò—â–µ–º ${gender === 'male' ? 'üë® –º—É–∂—á–∏–Ω—É' : 'üë© –∂–µ–Ω—â–∏–Ω—É'}...`);
  findChatPartner(userId, gender);
});

// –û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞
bot.action('search_cancel', async (ctx) => {
  try {
    await ctx.deleteMessage();
  } catch (e) {
    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', e.message);
  }
  ctx.reply('‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω');
});

// –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
function findChatPartner(userId, targetGender) {
  const user = userData.get(userId);
  const queue = searchQueue[targetGender];
  
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏
  if (queue.includes(userId)) {
    return;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
  queue.push(userId);
  
  // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
  if (queue.length >= 2) {
    const partnerId = queue.find(id => id !== userId);
    if (partnerId) {
      // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
      const index = queue.indexOf(partnerId);
      if (index > -1) queue.splice(index, 1);
      const userIndex = queue.indexOf(userId);
      if (userIndex > -1) queue.splice(userIndex, 1);
      
      // –°–æ–∑–¥–∞–µ–º —á–∞—Ç
      createChat(userId, partnerId);
    }
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞
function createChat(user1Id, user2Id) {
  const chatId = `${user1Id}_${user2Id}_${Date.now()}`;
  
  activeChats.set(user1Id, { partner: user2Id, chatId });
  activeChats.set(user2Id, { partner: user1Id, chatId });
  
  // –¢–∞–π–º–∞—É—Ç —á–∞—Ç–∞
  const timeout = setTimeout(() => {
    endChat(chatId);
  }, CONFIG.CHAT_TIMEOUT);
  
  cache.set(`chat_${chatId}`, timeout);
  
  // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const user1Gender = userData.get(user1Id)?.gender || 'unknown';
  const user2Gender = userData.get(user2Id)?.gender || 'unknown';
  
  bot.telegram.sendMessage(user1Id, `üí¨ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! (${user2Gender === 'male' ? 'üë®' : 'üë©'})\n\n‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...\n/stop - –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥`);
  bot.telegram.sendMessage(user2Id, `üí¨ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! (${user1Gender === 'male' ? 'üë®' : 'üë©'})\n\n‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...\n/stop - –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥`);
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–∞—Ç–∞
function endChat(chatId) {
  const [user1Id, user2Id] = chatId.split('_');
  
  activeChats.delete(parseInt(user1Id));
  activeChats.delete(parseInt(user2Id));
  cache.del(`chat_${chatId}`);
  
  bot.telegram.sendMessage(user1Id, '‚ùå –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω (—Ç–∞–π–º–∞—É—Ç)');
  bot.telegram.sendMessage(user2Id, '‚ùå –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω (—Ç–∞–π–º–∞—É—Ç)');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  const userId = ctx.from.id;
  const text = ctx.message.text;
  
  if (text.startsWith('/')) return;
  
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ
  const chat = activeChats.get(userId);
  if (chat) {
    const partnerId = chat.partner;
    
    try {
      await ctx.telegram.sendMessage(partnerId, `‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ:\n\n${text}\n\n/stop - –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥`);
      ctx.reply('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
      ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
      endChat(chat.chatId);
    }
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  if (ctx.session.step === 'set_gender') {
    // –£–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
    return;
  }
  
  ctx.reply('‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞');
});

// –ö–æ–º–∞–Ω–¥–∞ /stop
bot.command('stop', (ctx) => {
  const userId = ctx.from.id;
  const chat = activeChats.get(userId);
  
  if (chat) {
    endChat(chat.chatId);
    ctx.reply('‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω');
  } else {
    ctx.reply('‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤');
  }
});

// –ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞
bot.command('premium', (ctx) => {
  const userId = ctx.from.id;
  const user = userData.get(userId);
  
  if (user && user.premium) {
    return ctx.replyWithMarkdown('üíé –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞!\n\n‚ú® –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n‚Ä¢ üöª –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É\n‚Ä¢ ‚ôæÔ∏è –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫\n‚Ä¢ ‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏');
  }
  
  ctx.replyWithMarkdown(`üíé *–ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞* - ${CONFIG.PREMIUM_COST} —Ä—É–±.

‚ú® *–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:*
‚Ä¢ üöª –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É (–º—É–∂—Å–∫–æ–π/–∂–µ–Ω—Å–∫–∏–π)
‚Ä¢ ‚ôæÔ∏è –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–æ–≤
‚Ä¢ ‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–∏—Å–∫–∞

üí≥ –î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: @admin`);
});

// –ü–æ–º–æ—â—å
bot.command('help', (ctx) => {
  ctx.replyWithMarkdown(`‚ùì *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*

üîç *–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:*
‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: ${CONFIG.FREE_SEARCH_LIMIT} –ø–æ–∏—Å–∫–∞ –≤ –¥–µ–Ω—å
‚Ä¢ –ü—Ä–µ–º–∏—É–º: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ + –ø–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É

üíé *–ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞:*
‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${CONFIG.PREMIUM_COST} —Ä—É–±.
‚Ä¢ –ö–æ–º–∞–Ω–¥–∞: /premium

üìã *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å
/profile - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
/search - –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
/stop - –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥
/premium - –ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞

‚ö†Ô∏è *–ü—Ä–∞–≤–∏–ª–∞:*
‚Ä¢ –£–≤–∞–∂–∞–π—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤
‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω —Å–ø–∞–º
‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω—ã –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è`);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Vercel
module.exports = async (req, res) => {
  try {
    if (req.method === 'POST') {
      await bot.handleUpdate(req.body, res);
    } else {
      res.status(200).json({ 
        status: 'active',
        service: 'Anonymous Chat Bot',
        version: '1.0',
        users: userData.size,
        activeChats: activeChats.size
      });
    }
  } catch (err) {
    console.error('Error:', err);
    res.status(500).json({ error: 'Internal error' });
  }
};

console.log('Anonymous Chat Bot started');
