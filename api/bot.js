const { Telegraf } = require('telegraf');

const bot = new Telegraf(process.env.BOT_TOKEN, {
  telegram: {
    webhookReply: false // –í–ê–ñ–ù–û –¥–ª—è Vercel!
  }
});

// –í–∫–ª—é—á–∞–µ–º —Å–µ—Å—Å–∏–∏
bot.use(Telegraf.session());

// –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
bot.use(async (ctx, next) => {
  console.log('Received update:', JSON.stringify(ctx.update, null, 2));
  await next();
});

// –ö–æ–º–∞–Ω–¥—ã
bot.start(ctx => ctx.reply('ü™ô –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /exchange'));

bot.command('exchange', ctx => {
  ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É:', {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'BTC ‚Üí USDC', callback_data: 'BTC_USDC' }]
      ]
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
bot.action('BTC_USDC', ctx => {
  ctx.editMessageText('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É BTC:');
  ctx.session = { action: 'exchange', pair: 'BTC_USDC' };
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
bot.on('text', ctx => {
  if (ctx.session?.action === 'exchange') {
    const amount = parseFloat(ctx.message.text);
    if (isNaN(amount)) {
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!');
    }
    ctx.reply(`‚úÖ –í—ã –≤–≤–µ–ª–∏: ${amount} BTC`);
    ctx.session = null;
  }
});

// Vercel handler (–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û)
module.exports = async (req, res) => {
  try {
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
    console.log('Incoming request:', req.method, req.url);
    
    if (req.method === 'POST') {
      console.log('Request body:', JSON.stringify(req.body, null, 2));
      await bot.handleUpdate(req.body, res);
    } else {
      // –î–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤
      res.status(200).json({
        status: 'alive',
        message: 'Bot is running'
      });
    }
  } catch (err) {
    console.error('FATAL ERROR:', err);
    res.status(500).json({ error: err.message });
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
console.log('Bot initialized');