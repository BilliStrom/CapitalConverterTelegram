const { Telegraf, Markup } = require('telegraf');
const { Redis } = require('@upstash/redis');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
const redis = new Redis({
  url: process.env.UPSTASH_REDIS_REST_URL,
  token: process.env.UPSTASH_REDIS_REST_TOKEN,
});

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  ADMIN_ID: process.env.ADMIN_ID || 5948326124,
  FREE_SEARCH_LIMIT: 3,
  PREMIUM_COST: 100,
  SESSION_TIMEOUT: 600000,
  CHAT_TIMEOUT: 1800000,
  SEARCH_TIMEOUT: 300000,
  TERMS_URL: 'https://yourwebsite.com/terms',
  PRIVACY_URL: 'https://yourwebsite.com/privacy',
  SUPPORT_URL: 'https://t.me/your_support'
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Redis
const redisHelpers = {
  setUser: async (userId, data) => {
    try {
      const userData = JSON.stringify(data);
      await redis.set(`user:${userId}`, userData);
      return true;
    } catch (error) {
      console.error('Error setting user:', error);
      return false;
    }
  },

  getUser: async (userId) => {
    try {
      const data = await redis.get(`user:${userId}`);
      
      if (!data) return null;
      
      if (typeof data === 'string') {
        try {
          return JSON.parse(data);
        } catch (parseError) {
          console.error('Failed to parse user data, deleting corrupted data:', parseError);
          await redis.del(`user:${userId}`);
          return null;
        }
      } else if (typeof data === 'object' && data !== null) {
        return data;
      } else {
        console.error('Invalid user data format:', data);
        return null;
      }
    } catch (error) {
      console.error('Error getting user:', error);
      return null;
    }
  },

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é –ø–æ–∏—Å–∫–∞
  addToSearchQueue: async (userId, userData) => {
    try {
      // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è hset: –∫–ª—é—á, –ø–æ–ª–µ, –∑–Ω–∞—á–µ–Ω–∏–µ
      await redis.hset('search_queue', userId, JSON.stringify(userData));
      return true;
    } catch (error) {
      console.error('Error adding to search queue:', error);
      return false;
    }
  },

  removeFromSearchQueue: async (userId) => {
    try {
      await redis.hdel('search_queue', userId);
      return true;
    } catch (error) {
      console.error('Error removing from search queue:', error);
      return false;
    }
  },

  getSearchQueue: async () => {
    try {
      const queue = await redis.hgetall('search_queue');
      return queue || {};
    } catch (error) {
      console.error('Error getting search queue:', error);
      return {};
    }
  },

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —á–∞—Ç–∞–º–∏
  setActiveChat: async (userId, partnerId) => {
    try {
      await redis.set(`chat:${userId}`, partnerId);
      return true;
    } catch (error) {
      console.error('Error setting active chat:', error);
      return false;
    }
  },

  getActiveChat: async (userId) => {
    try {
      return await redis.get(`chat:${userId}`);
    } catch (error) {
      console.error('Error getting active chat:', error);
      return null;
    }
  },

  removeActiveChat: async (userId) => {
    try {
      await redis.del(`chat:${userId}`);
      return true;
    } catch (error) {
      console.error('Error removing active chat:', error);
      return false;
    }
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
function getMainMenu() {
  return Markup.keyboard([
    ['üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞', 'üöª –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'],
    ['üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞', 'üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞'],
    ['üìú –ü—Ä–∞–≤–∏–ª–∞', '‚ùå –í—ã—Ö–æ–¥']
  ]).resize();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é —á–∞—Ç–∞
function getChatMenu() {
  return Markup.keyboard([
    ['‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥']
  ]).resize();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
async function findChatPartner(userId, userData) {
  try {
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ–∏—Å–∫–∞
    await redisHelpers.addToSearchQueue(userId, userData);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å –ø–æ–∏—Å–∫–∞
    const queue = await redisHelpers.getSearchQueue();
    
    // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    for (const [otherUserId, otherUserDataStr] of Object.entries(queue)) {
      if (otherUserId !== userId.toString()) {
        try {
          const otherUserData = JSON.parse(otherUserDataStr);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—â–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º —Å–µ–±—è
          if (otherUserId !== userId.toString()) {
            // –°–æ–∑–¥–∞–µ–º —á–∞—Ç –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            await redisHelpers.setActiveChat(userId, otherUserId);
            await redisHelpers.setActiveChat(otherUserId, userId);
            
            // –£–¥–∞–ª—è–µ–º –æ–±–æ–∏—Ö –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–∏—Å–∫–∞
            await redisHelpers.removeFromSearchQueue(userId);
            await redisHelpers.removeFromSearchQueue(otherUserId);
            
            return otherUserId;
          }
        } catch (e) {
          console.error('Error parsing user data from queue:', e);
        }
      }
    }
    
    return null;
  } catch (error) {
    console.error('Error in findChatPartner:', error);
    return null;
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);

// –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (ctx) => {
  try {
    await ctx.answerCbQuery();
    
    const data = ctx.callbackQuery.data;
    const userId = ctx.from.id;
    
    if (data === 'age_confirm_yes') {
      const user = await redisHelpers.getUser(userId);
      
      if (user) {
        user.ageVerified = true;
        await redisHelpers.setUser(userId, user);
        
        await ctx.editMessageText(
          `üìú –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏:\n\n` +
          `1. –ó–∞–ø—Ä–µ—â–µ–Ω—ã –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –∏ —É–≥—Ä–æ–∑—ã\n` +
          `2. –ó–∞–ø—Ä–µ—â–µ–Ω —Å–ø–∞–º –∏ —Ä–µ–∫–ª–∞–º–∞\n` +
          `3. –ó–∞–ø—Ä–µ—â–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö\n` +
          `4. –£–≤–∞–∂–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n` +
          `–ü–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞: ${CONFIG.TERMS_URL}\n` +
          `–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: ${CONFIG.PRIVACY_URL}`,
          Markup.inlineKeyboard([
            [Markup.button.callback('‚úÖ –ü—Ä–∏–Ω–∏–º–∞—é –ø—Ä–∞–≤–∏–ª–∞', 'terms_accept')],
            [Markup.button.callback('‚ùå –ù–µ –ø—Ä–∏–Ω–∏–º–∞—é', 'terms_decline')]
          ])
        );
      }
    } else if (data === 'age_confirm_no') {
      await ctx.editMessageText('‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
    } else if (data === 'terms_accept') {
      const user = await redisHelpers.getUser(userId);
      
      if (user) {
        user.termsAccepted = true;
        await redisHelpers.setUser(userId, user);
        
        await ctx.editMessageText(
          '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:',
          Markup.inlineKeyboard([
            [Markup.button.callback('üë® –ú—É–∂—Å–∫–æ–π', 'gender_male')],
            [Markup.button.callback('üë© –ñ–µ–Ω—Å–∫–∏–π', 'gender_female')]
          ])
        );
      }
    } else if (data === 'terms_decline') {
      await ctx.editMessageText('‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ - –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
    } else if (data.startsWith('gender_')) {
      const gender = data.replace('gender_', '');
      const user = await redisHelpers.getUser(userId);
      
      if (user) {
        user.gender = gender;
        await redisHelpers.setUser(userId, user);
        
        await ctx.editMessageText(
          '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.',
          getMainMenu()
        );
      }
    } else if (data === 'start_registration') {
      await ctx.deleteMessage();
      await ctx.reply(
        '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –≤–∞–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 18 –ª–µ—Ç.',
        Markup.inlineKeyboard([
          [Markup.button.callback('‚úÖ –î–∞, –º–Ω–µ –µ—Å—Ç—å 18 –ª–µ—Ç', 'age_confirm_yes')],
          [Markup.button.callback('‚ùå –ù–µ—Ç', 'age_confirm_no')]
        ])
      );
    }
  } catch (error) {
    console.error('Error in callback query handler:', error);
    try {
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    } catch (e) {
      console.error('Failed to answer callback query:', e);
    }
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /start - –Ω–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
bot.command('start', async (ctx) => {
  try {
    const userId = ctx.from.id;
    let user = await redisHelpers.getUser(userId);
    
    if (!user) {
      user = {
        id: userId,
        username: ctx.from.username || '',
        first_name: ctx.from.first_name || '',
        last_name: ctx.from.last_name || '',
        ageVerified: false,
        termsAccepted: false,
        gender: null,
        searches: 0,
        premium: false,
        createdAt: new Date().toISOString()
      };
      
      await redisHelpers.setUser(userId, user);
      
      await ctx.reply(
        'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç!\n\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –≤–∞–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 18 –ª–µ—Ç.',
        Markup.inlineKeyboard([
          [Markup.button.callback('‚úÖ –î–∞, –º–Ω–µ –µ—Å—Ç—å 18 –ª–µ—Ç', 'age_confirm_yes')],
          [Markup.button.callback('‚ùå –ù–µ—Ç', 'age_confirm_no')]
        ])
      );
    } else if (!user.ageVerified) {
      await ctx.reply(
        '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –≤–∞–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 18 –ª–µ—Ç.',
        Markup.inlineKeyboard([
          [Markup.button.callback('‚úÖ –î–∞, –º–Ω–µ –µ—Å—Ç—å 18 –ª–µ—Ç', 'age_confirm_yes')],
          [Markup.button.callback('‚ùå –ù–µ—Ç', 'age_confirm_no')]
        ])
      );
    } else if (!user.termsAccepted) {
      await ctx.reply(
        `üìú –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏:\n\n` +
        `1. –ó–∞–ø—Ä–µ—â–µ–Ω—ã –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –∏ —É–≥—Ä–æ–∑—ã\n` +
        `2. –ó–∞–ø—Ä–µ—â–µ–Ω —Å–ø–∞–º –∏ —Ä–µ–∫–ª–∞–º–∞\n` +
        `3. –ó–∞–ø—Ä–µ—â–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö\n` +
        `4. –£–≤–∞–∂–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n` +
        `–ü–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞: ${CONFIG.TERMS_URL}\n` +
        `–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: ${CONFIG.PRIVACY_URL}`,
        Markup.inlineKeyboard([
          [Markup.button.callback('‚úÖ –ü—Ä–∏–Ω–∏–º–∞—é –ø—Ä–∞–≤–∏–ª–∞', 'terms_accept')],
          [Markup.button.callback('‚ùå –ù–µ –ø—Ä–∏–Ω–∏–º–∞—é', 'terms_decline')]
        ])
      );
    } else if (!user.gender) {
      await ctx.reply(
        '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:',
        Markup.inlineKeyboard([
          [Markup.button.callback('üë® –ú—É–∂—Å–∫–æ–π', 'gender_male')],
          [Markup.button.callback('üë© –ñ–µ–Ω—Å–∫–∏–π', 'gender_female')]
        ])
      );
    } else {
      await ctx.reply(
        '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
        getMainMenu()
      );
    }
  } catch (error) {
    console.error('Error in start command:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const text = ctx.message.text;
    const user = await redisHelpers.getUser(userId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ
    const activeChat = await redisHelpers.getActiveChat(userId);
    
    if (activeChat) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ, –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
      try {
        await ctx.telegram.sendMessage(activeChat, `üí¨: ${text}`, getChatMenu());
        await ctx.reply('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', getChatMenu());
      } catch (error) {
        console.error('Error sending message to partner:', error);
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è.', getMainMenu());
        await redisHelpers.removeActiveChat(userId);
      }
      return;
    }

    if (!user || !user.ageVerified || !user.termsAccepted || !user.gender) {
      return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:', Markup.inlineKeyboard([
        [Markup.button.callback('–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', 'start_registration')]
      ]));
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    switch (text) {
      case 'üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞':
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–∏—Å–∫–∞
        if (user.searches >= CONFIG.FREE_SEARCH_LIMIT && !user.premium) {
          await ctx.reply(
            `‚ùå –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤ (${CONFIG.FREE_SEARCH_LIMIT} –≤ –¥–µ–Ω—å).\n\n–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è.`,
            Markup.inlineKeyboard([
              [Markup.button.callback('üíé –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø—Ä–µ–º–∏—É–º', 'buy_premium')]
            ])
          );
          break;
        }
        
        await ctx.reply('üîç –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...', getChatMenu());
        
        // –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
        const partnerId = await findChatPartner(userId, user);
        
        if (partnerId) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–æ–≤
          user.searches += 1;
          await redisHelpers.setUser(userId, user);
          
          // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
          await ctx.reply('‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ.', getChatMenu());
          await ctx.telegram.sendMessage(partnerId, '‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ.', getChatMenu());
        } else {
          // –ï—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥–∏ –∏ –∂–¥–µ–º
          setTimeout(async () => {
            const stillInQueue = await redisHelpers.getActiveChat(userId);
            if (!stillInQueue) {
              await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', getMainMenu());
              await redisHelpers.removeFromSearchQueue(userId);
            }
          }, CONFIG.SEARCH_TIMEOUT);
        }
        break;
        
      case '‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥':
        const chatPartner = await redisHelpers.getActiveChat(userId);
        if (chatPartner) {
          await ctx.reply('–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.', getMainMenu());
          await ctx.telegram.sendMessage(chatPartner, '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥.', getMainMenu());
          
          // –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
          await redisHelpers.removeActiveChat(userId);
          await redisHelpers.removeActiveChat(chatPartner);
        } else {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.', getMainMenu());
        }
        break;
        
      case 'üöª –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å':
        const profileText = `üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n` +
          `–ò–º—è: ${user.first_name} ${user.last_name}\n` +
          `Username: @${user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
          `–ü–æ–ª: ${user.gender === 'male' ? 'üë® –ú—É–∂—Å–∫–æ–π' : 'üë© –ñ–µ–Ω—Å–∫–∏–π'}\n` +
          `–ü–æ–∏—Å–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ${user.searches}/${CONFIG.FREE_SEARCH_LIMIT}\n` +
          `–°—Ç–∞—Ç—É—Å: ${user.premium ? 'üíé –ü—Ä–µ–º–∏—É–º' : 'üîì –û–±—ã—á–Ω—ã–π'}`;
        await ctx.reply(profileText, getMainMenu());
        break;
        
      case 'üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞':
        await ctx.reply(
          `üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞:\n\n` +
          `‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–æ–≤\n` +
          `‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–∏—Å–∫–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤\n` +
          `‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ\n\n` +
          `–°—Ç–æ–∏–º–æ—Å—Ç—å: ${CONFIG.PREMIUM_COST} —Ä—É–±.`,
          Markup.inlineKeyboard([
            [Markup.button.callback('üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏–∫—É', 'buy_premium')]
          ])
        );
        break;
        
      case 'üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞':
        await ctx.reply(`üìû –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: ${CONFIG.SUPPORT_URL}`, getMainMenu());
        break;
        
      case 'üìú –ü—Ä–∞–≤–∏–ª–∞':
        await ctx.reply(
          `üìú –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n\n` +
          `1. –ó–∞–ø—Ä–µ—â–µ–Ω—ã –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –∏ —É–≥—Ä–æ–∑—ã\n` +
          `2. –ó–∞–ø—Ä–µ—â–µ–Ω —Å–ø–∞–º –∏ —Ä–µ–∫–ª–∞–º–∞\n` +
          `3. –ó–∞–ø—Ä–µ—â–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö\n` +
          `4. –£–≤–∞–∂–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n` +
          `–ü–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞: ${CONFIG.TERMS_URL}`,
          getMainMenu()
        );
        break;
        
      case '‚ùå –í—ã—Ö–æ–¥':
        await ctx.reply(
          '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?',
          Markup.keyboard([
            ['‚úÖ –î–∞, –≤—ã–π—Ç–∏', '‚ùå –ù–µ—Ç, –æ—Å—Ç–∞—Ç—å—Å—è']
          ]).resize()
        );
        break;
        
      default:
        await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', getMainMenu());
    }
  } catch (error) {
    console.error('Error in text processing:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', getMainMenu());
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Vercel
module.exports = async (req, res) => {
  try {
    if (req.method === 'POST') {
      await bot.handleUpdate(req.body, res);
    } else {
      res.status(200).json({ 
        status: 'active', 
        service: 'Anonymous Chat Bot', 
        version: '3.0' 
      });
    }
  } catch (err) {
    console.error('Error:', err);
    res.status(500).json({ error: 'Internal error' });
  }
};

console.log('Anonymous Chat Bot started');
