const { Telegraf, Markup } = require('telegraf');

// –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ –≤–º–µ—Å—Ç–æ node-cache
const cache = {
  _store: new Map(),
  _timeouts: new Map(),
  set(key, value, ttl = 3600) {
    if (this._timeouts.has(key)) {
      clearTimeout(this._timeouts.get(key));
      this._timeouts.delete(key);
    }
    this._store.set(key, value);
    const timeout = setTimeout(() => {
      this._store.delete(key);
      this._timeouts.delete(key);
    }, ttl * 1000);
    this._timeouts.set(key, timeout);
  },
  get(key) {
    return this._store.get(key);
  }
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  ADMIN_ID: @perepytali, // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID
  MIN_AMOUNT_USD: 10,
  ORDER_EXPIRY_MINUTES: 60,
  RATES_UPDATE_INTERVAL: 30,
  SESSION_TIMEOUT: 600000,
  COMMISSION_PERCENT: 1,
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN, {
  telegram: { webhookReply: false }
});

const userSessions = {};

// –î–∞–Ω–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
const cryptoData = {
  BTC: { 
    name: "Bitcoin", 
    wallet: "bc1qre7z0r3jpkaqtcr3wv5lvvy78u578xkmap9r7l", 
    min: 0.001,
    decimals: 8,
    explorer: txid => `https://blockchair.com/bitcoin/transaction/${txid}`
  },
  ETH: { 
    name: "Ethereum", 
    wallet: "0xCcd1e4947C45B1c22c46d59F16D34be4441377B8", 
    min: 0.01,
    decimals: 18,
    explorer: txid => `https://etherscan.io/tx/${txid}`
  },
  USDT: { 
    name: "Tether", 
    wallet: "0xCcd1e4947C45B1c22c46d59F16D34be4441377B8", 
    min: 10,
    decimals: 6,
    explorer: txid => `https://etherscan.io/tx/${txid}`
  },
  LTC: { 
    name: "Litecoin", 
    wallet: "ltc1qjhaut8kw9e450s6k9fa82seqykg4xcu0zfqxc8", 
    min: 0.1,
    decimals: 8,
    explorer: txid => `https://blockchair.com/litecoin/transaction/${txid}`
  }
};

// –ö—É—Ä—Å—ã –æ–±–º–µ–Ω–∞
let exchangeRates = {
  BTC_USDT: 106368,
  ETH_USDT: 2575.78,
  LTC_USDT: 86.83,
  BTC_ETH: 41.3,
  ETH_BTC: 0.024213,
  LTC_BTC: 0.000816,
  BTC_LTC: 1226.11,
  ETH_LTC: 29.69
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–π
bot.use((ctx, next) => {
  const userId = ctx.from?.id;
  if (!userId) return next();
  
  if (!userSessions[userId]) {
    userSessions[userId] = {
      data: { userId },
      timer: setTimeout(() => delete userSessions[userId], CONFIG.SESSION_TIMEOUT)
    };
  }
  
  clearTimeout(userSessions[userId].timer);
  userSessions[userId].timer = setTimeout(() => {
    delete userSessions[userId];
  }, CONFIG.SESSION_TIMEOUT);
  
  ctx.session = userSessions[userId].data;
  return next();
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', (ctx) => {
  const welcomeMessage = `üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *Crypto Exchange Bot*!
  
üìä *–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã:*
1 BTC = ${exchangeRates.BTC_USDT} USDT
1 ETH = ${exchangeRates.ETH_USDT} USDT
1 LTC = ${exchangeRates.LTC_USDT} USDT

üí± –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±–º–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /exchange
üìù –ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ—à–µ–ª–µ–∫: /register
üÜò –ü–æ–º–æ—â—å: /help`;

  ctx.replyWithMarkdown(welcomeMessage);
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞
bot.command('register', (ctx) => {
  ctx.session.step = 'register_wallet';
  ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤:');
});

// –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—à–µ–ª—å–∫–∞
bot.command('wallet', (ctx) => {
  const address = ctx.session.walletAddress || cache.get(`user_${ctx.from.id}`);
  if (address) {
    ctx.replyWithMarkdown(`üíº –í–∞—à –∫–æ—à–µ–ª–µ–∫:\n\`${address}\``);
  } else {
    ctx.reply('‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register');
  }
});

// –û–±–º–µ–Ω –≤–∞–ª—é—Ç—ã
bot.command('exchange', (ctx) => {
  if (!ctx.session.walletAddress && !cache.get(`user_${ctx.from.id}`)) {
    return ctx.reply('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∫–æ—à–µ–ª–µ–∫ –∫–æ–º–∞–Ω–¥–æ–π /register');
  }
  ctx.session.step = 'select_pair';
  showExchangeMenu(ctx);
});

// –ú–µ–Ω—é –æ–±–º–µ–Ω–∞
function showExchangeMenu(ctx) {
  ctx.reply('üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞:', Markup.inlineKeyboard([
    [
      Markup.button.callback('BTC ‚Üí USDT', 'pair_BTC_USDT'),
      Markup.button.callback('ETH ‚Üí BTC', 'pair_ETH_BTC'),
    ],
    [
      Markup.button.callback('USDT ‚Üí ETH', 'pair_USDT_ETH'),
      Markup.button.callback('LTC ‚Üí BTC', 'pair_LTC_BTC'),
    ]
  ]));
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—ã
bot.action(/^pair_(\w+)_(\w+)$/, async (ctx) => {
  const [, from, to] = ctx.match;
  ctx.session.step = 'enter_amount';
  ctx.session.from = from.toUpperCase();
  ctx.session.to = to.toUpperCase();
  
  try {
    await ctx.deleteMessage();
  } catch (e) {
    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', e.message);
  }
  
  const minAmount = cryptoData[ctx.session.from]?.min || 0;
  ctx.reply(`üí± –í—ã –≤—ã–±—Ä–∞–ª–∏: ${ctx.session.from} ‚Üí ${ctx.session.to}\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É ${ctx.session.from} –¥–ª—è –æ–±–º–µ–Ω–∞${minAmount ? `\n(–ú–∏–Ω–∏–º—É–º: ${minAmount} ${ctx.session.from})` : ''}:`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞
bot.on('text', async (ctx) => {
  const text = ctx.message.text.trim();
  
  if (text.startsWith('/')) return;
  
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞
  if (ctx.session.step === 'register_wallet') {
    cache.set(`user_${ctx.from.id}`, text);
    ctx.session.walletAddress = text;
    return ctx.replyWithMarkdown(`‚úÖ –ö–æ—à–µ–ª–µ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:\n\`${text}\`\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /exchange`);
  }
  
  // –í–≤–æ–¥ —Å—É–º–º—ã
  if (ctx.session.step === 'enter_amount') {
    return handleAmountInput(ctx);
  }
  
  // –í–≤–æ–¥ TXID
  if (ctx.session.step === 'confirm_txid') {
    return handleTxidInput(ctx);
  }
  
  ctx.reply('‚ÑπÔ∏è –î–ª—è –Ω–∞—á–∞–ª–∞ –æ–±–º–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /exchange');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã
async function handleAmountInput(ctx) {
  const amount = parseFloat(ctx.message.text.replace(',', '.'));
  
  if (isNaN(amount)) {
    return ctx.reply('‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 0.5 –∏–ª–∏ 100');
  }
  
  const { from, to } = ctx.session;
  const minAmount = cryptoData[from]?.min || 0;
  
  if (amount < minAmount) {
    return ctx.reply(`‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${minAmount} ${from}`);
  }
  
  const pair = `${from}_${to}`;
  if (!exchangeRates[pair]) {
    return ctx.reply('‚ùå –ö—É—Ä—Å –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
  }
  
  const commission = amount * (CONFIG.COMMISSION_PERCENT / 100);
  const netAmount = amount - commission;
  const rate = exchangeRates[pair];
  const result = (netAmount * rate).toFixed(8);
  
  ctx.session.order = {
    amount,
    netAmount,
    commission,
    from,
    to,
    rate,
    result,
    timestamp: Date.now()
  };
  
  const fromCurrency = cryptoData[from];
  
  ctx.replyWithMarkdown(`‚úÖ *–î–µ—Ç–∞–ª–∏ –æ–±–º–µ–Ω–∞:*
  
‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ: *${formatCrypto(amount, from)} ${from}*
‚ûñ –ö–æ–º–∏—Å—Å–∏—è (${CONFIG.COMMISSION_PERCENT}%): *${formatCrypto(commission, from)} ${from}*
üîÑ –ö –æ–±–º–µ–Ω—É: *${formatCrypto(netAmount, from)} ${from}*
‚¨ÖÔ∏è –ü–æ–ª—É—á–∞–µ—Ç–µ: *${formatCrypto(result, to)} ${to}*
üìä –ö—É—Ä—Å: 1 ${from} = ${rate} ${to}

üí≥ *–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:*
1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ ${formatCrypto(amount, from)} ${from} –Ω–∞:
\`${fromCurrency.wallet}\`

2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ TXID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏`);

  ctx.session.step = 'confirm_txid';
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ TXID
async function handleTxidInput(ctx) {
  const txid = ctx.message.text.trim();
  const { order } = ctx.session;
  
  if (!order) {
    return ctx.reply('‚ùå –û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /exchange');
  }
  
  if (txid.length < 10) {
    return ctx.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç TXID. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
  }
  
  const address = ctx.session.walletAddress || cache.get(`user_${ctx.from.id}`);
  
  ctx.replyWithMarkdown(`üì¨ *–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–º–µ–Ω –ø—Ä–∏–Ω—è—Ç!*
  
TXID: \`${txid}\`
–°—É–º–º–∞: ${formatCrypto(order.amount, order.from)} ${order.from}
–ö –ø–æ–ª—É—á–µ–Ω–∏—é: ${formatCrypto(order.result, order.to)} ${order.to}
–ê–¥—Ä–µ—Å: \`${address}\`

‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 1-24 —á–∞—Å–æ–≤.

üîó –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: [Block Explorer](${cryptoData[order.from]?.explorer(txid) || '#'})`);

  clearUserSession(ctx);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function formatCrypto(value, currency) {
  const num = parseFloat(value);
  const decimals = cryptoData[currency]?.decimals || 8;
  return num.toLocaleString('en', {
    minimumFractionDigits: 0,
    maximumFractionDigits: decimals
  });
}

function clearUserSession(ctx) {
  const userId = ctx.from?.id;
  if (userId && userSessions[userId]) {
    clearTimeout(userSessions[userId].timer);
    delete userSessions[userId];
  }
  ctx.session = {};
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Vercel
module.exports = async (req, res) => {
  try {
    if (req.method === 'POST') {
      await bot.handleUpdate(req.body, res);
    } else {
      res.status(200).json({ 
        status: 'active',
        service: 'Crypto Exchange Bot',
        version: '3.1'
      });
    }
  } catch (err) {
    console.error('Error:', err);
    res.status(500).json({ error: 'Internal error' });
  }
};

console.log('Bot started');