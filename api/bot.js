const { Telegraf, Markup } = require('telegraf');
const axios = require('axios');
const NodeCache = require('node-cache');
const Web3 = require('web3');
const { ethers } = require('ethers');
const { generateMnemonic, mnemonicToSeedSync } = require('bip39');
const { hdkey } = require('ethereumjs-wallet');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  ADMIN_ID: 123456789, // –í–∞—à Telegram ID
  MIN_AMOUNT_USD: 10,
  ORDER_EXPIRY_MINUTES: 60,
  RATES_UPDATE_INTERVAL: 30,
  SESSION_TIMEOUT: 600000,
  COMMISSION_PERCENT: 1, // –ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞
  HOT_WALLET_MNEMONIC: process.env.HOT_WALLET_MNEMONIC || generateMnemonic(),
};

// –§–∏–∫—Å –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤
process.env.NTBA_FIX_319 = "1";
process.env.NTBA_FIX_350 = "1";

const bot = new Telegraf(process.env.BOT_TOKEN, {
  telegram: { webhookReply: false }
});

// –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
const cache = new NodeCache({ stdTTL: 3600 });
const userSessions = {};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web3
const web3 = new Web3(process.env.INFURA_URL || 'https://mainnet.infura.io/v3/YOUR_INFURA_KEY');
const provider = new ethers.providers.JsonRpcProvider(process.env.INFURA_URL || 'https://mainnet.infura.io/v3/YOUR_INFURA_KEY');

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ—Ä—è—á–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
function getHotWallet() {
  const seed = mnemonicToSeedSync(CONFIG.HOT_WALLET_MNEMONIC);
  const hdWallet = hdkey.fromMasterSeed(seed);
  const wallet = hdWallet.derivePath("m/44'/60'/0'/0/0").getWallet();
  return {
    address: wallet.getAddressString(),
    privateKey: wallet.getPrivateKey().toString('hex')
  };
}

const HOT_WALLET = getHotWallet();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–π
bot.use((ctx, next) => {
  const userId = ctx.from?.id;
  if (!userId) return next();
  
  if (!userSessions[userId]) {
    userSessions[userId] = {
      data: { userId },
      timer: setTimeout(() => delete userSessions[userId], CONFIG.SESSION_TIMEOUT)
    };
  }
  
  clearTimeout(userSessions[userId].timer);
  userSessions[userId].timer = setTimeout(() => {
    delete userSessions[userId];
  }, CONFIG.SESSION_TIMEOUT);
  
  ctx.session = userSessions[userId].data;
  return next();
});

// –î–∞–Ω–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
const cryptoData = {
  BTC: { 
    name: "Bitcoin", 
    wallet: "bc1qre7z0r3jpkaqtcr3wv5lvvy78u578xkmap9r7l", 
    min: 0.001,
    decimals: 8,
    explorer: txid => `https://blockchair.com/bitcoin/transaction/${txid}`
  },
  ETH: { 
    name: "Ethereum", 
    wallet: HOT_WALLET.address, 
    min: 0.01,
    decimals: 18,
    explorer: txid => `https://etherscan.io/tx/${txid}`
  },
  USDT: { 
    name: "Tether", 
    wallet: HOT_WALLET.address, 
    min: 10,
    decimals: 6,
    explorer: txid => `https://etherscan.io/tx/${txid}`
  },
  LTC: { 
    name: "Litecoin", 
    wallet: "ltc1qjhaut8kw9e450s6k9fa82seqykg4xcu0zfqxc8", 
    min: 0.1,
    decimals: 8,
    explorer: txid => `https://blockchair.com/litecoin/transaction/${txid}`
  },
  BNB: { 
    name: "Binance Coin", 
    wallet: HOT_WALLET.address, 
    min: 0.1,
    decimals: 18,
    explorer: txid => `https://bscscan.com/tx/${txid}`
  },
  XRP: { 
    name: "Ripple", 
    wallet: "rM73La2rNE3SP6WbTvAuxGUmUsGN4YjJET", 
    min: 10,
    decimals: 6,
    explorer: txid => `https://xrpscan.com/tx/${txid}`
  },
};

// –ö—É—Ä—Å—ã –æ–±–º–µ–Ω–∞
let exchangeRates = {
  BTC_USDT: 106368,
  ETH_USDT: 2575.78,
  LTC_USDT: 86.83,
  BTC_ETH:  41.3,
  ETH_BTC: 0.024213,
  LTC_BTC: 0.000816,
  BTC_LTC: 1226.11,
  ETH_LTC: 29.69,
  BNB_USDT: 652.92,
  XRP_USDT: 2.18,
  BTC_BNB: 163.02,
  ETH_BNB: 3.95,
};

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function registerUser(ctx, address) {
  const userId = ctx.from.id;
  cache.set(`user_${userId}`, { address });
  ctx.session.walletAddress = address;
  return `‚úÖ –ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n\n–í–∞—à –∞–¥—Ä–µ—Å: \`${address}\`\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∞—Ç—å –æ–±–º–µ–Ω—ã.`;
}

// –ö–æ–º–∞–Ω–¥—ã
bot.command('start', (ctx) => {
  const welcomeMessage = `üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *Crypto Exchange Bot*!
  
–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ–±–º–µ–Ω—è—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –ø–æ –≤—ã–≥–æ–¥–Ω–æ–º—É –∫—É—Ä—Å—É. 

üìä *–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã:*
${Object.entries(cryptoData)
  .filter(([symbol]) => exchangeRates[`${symbol}_USDT`])
  .map(([symbol, data]) => `1 ${symbol} = ${exchangeRates[`${symbol}_USDT`]} USDT`)
  .join('\n')}

üí± –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±–º–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /exchange
üìù –ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ—à–µ–ª–µ–∫: /register
üÜò –ü–æ–º–æ—â—å: /help`;

  ctx.replyWithMarkdown(welcomeMessage);
});

bot.command('register', (ctx) => {
  ctx.session.step = 'register_wallet';
  ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤:');
});

bot.command('wallet', (ctx) => {
  const address = ctx.session.walletAddress;
  if (address) {
    ctx.replyWithMarkdown(`üíº –í–∞—à –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫:\n\`${address}\``);
  } else {
    ctx.reply('‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register');
  }
});

bot.command('rates', (ctx) => {
  const ratesMessage = `üìà *–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã:*
${Object.entries(cryptoData)
  .filter(([symbol]) => exchangeRates[`${symbol}_USDT`])
  .map(([symbol, data]) => `1 ${symbol} = ${exchangeRates[`${symbol}_USDT`]} USDT`)
  .join('\n')}`;

  ctx.replyWithMarkdown(ratesMessage);
});

bot.command('exchange', (ctx) => {
  if (!ctx.session.walletAddress) {
    return ctx.reply('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∫–æ—à–µ–ª–µ–∫ –∫–æ–º–∞–Ω–¥–æ–π /register');
  }
  ctx.session.step = 'select_pair';
  showExchangeMenu(ctx);
});

bot.command('admin_update', (ctx) => {
  if (ctx.from.id !== CONFIG.ADMIN_ID) {
    return ctx.reply('‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
  }
  
  const args = ctx.message.text.split(' ');
  args.shift();
  
  if (args.length === 0) {
    return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_update BTC_USDT=65000 ETH_USDT=3500');
  }
  
  let updated = 0;
  args.forEach(arg => {
    const [pair, value] = arg.split('=');
    if (pair && value) {
      const rate = parseFloat(value);
      if (!isNaN(rate)) {
        exchangeRates[pair.toUpperCase()] = rate;
        updated++;
      }
    }
  });
  
  ctx.reply(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updated} –∫—É—Ä—Å–æ–≤`);
});

// –ú–µ–Ω—é –æ–±–º–µ–Ω–∞
function showExchangeMenu(ctx) {
  ctx.reply('üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞:', Markup.inlineKeyboard([
    [
      Markup.button.callback('BTC ‚Üí USDT', 'pair_BTC_USDT'),
      Markup.button.callback('ETH ‚Üí BTC', 'pair_ETH_BTC'),
    ],
    [
      Markup.button.callback('USDT ‚Üí ETH', 'pair_USDT_ETH'),
      Markup.button.callback('LTC ‚Üí BTC', 'pair_LTC_BTC'),
    ],
    [
      Markup.button.callback('–î—Ä—É–≥–∏–µ –ø–∞—Ä—ã', 'more_pairs')
    ]
  ]));
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
bot.action('more_pairs', (ctx) => {
  ctx.editMessageText('üîÄ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä—ã:', Markup.inlineKeyboard([
    [
      Markup.button.callback('ETH ‚Üí USDT', 'pair_ETH_USDT'),
      Markup.button.callback('BNB ‚Üí BTC', 'pair_BNB_BTC'),
    ],
    [
      Markup.button.callback('XRP ‚Üí ETH', 'pair_XRP_ETH'),
      Markup.button.callback('BTC ‚Üí BNB', 'pair_BTC_BNB'),
    ],
    [Markup.button.callback('‚Üê –ù–∞–∑–∞–¥', 'back_to_main')]
  ]));
});

bot.action('back_to_main', (ctx) => {
  ctx.session.step = 'select_pair';
  showExchangeMenu(ctx);
});

bot.action(/^pair_(\w+)_(\w+)$/, async (ctx) => {
  const [, from, to] = ctx.match;
  
  ctx.session.step = 'enter_amount';
  ctx.session.from = from.toUpperCase();
  ctx.session.to = to.toUpperCase();
  
  try {
    await ctx.deleteMessage();
  } catch (e) {
    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', e.message);
  }
  
  const minAmount = cryptoData[ctx.session.from]?.min || 0;
  ctx.reply(`üí± –í—ã –≤—ã–±—Ä–∞–ª–∏: ${ctx.session.from} ‚Üí ${ctx.session.to}\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É ${ctx.session.from} –¥–ª—è –æ–±–º–µ–Ω–∞${minAmount ? `\n(–ú–∏–Ω–∏–º—É–º: ${minAmount} ${ctx.session.from})` : ''}:`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞
bot.on('text', async (ctx) => {
  const text = ctx.message.text.trim();
  
  if (text.startsWith('/')) return;
  
  if (ctx.session.step === 'register_wallet') {
    const address = text;
    const message = await registerUser(ctx, address);
    return ctx.replyWithMarkdown(message);
  }
  
  if (ctx.session.step === 'enter_amount') {
    return handleAmountInput(ctx);
  }
  
  if (ctx.session.step === 'confirm_txid') {
    return handleTxidInput(ctx);
  }
  
  ctx.reply('‚ÑπÔ∏è –î–ª—è –Ω–∞—á–∞–ª–∞ –æ–±–º–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /exchange');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
async function handleAmountInput(ctx) {
  const amount = parseFloat(ctx.message.text.replace(',', '.'));
  
  if (isNaN(amount)) {
    return ctx.reply('‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 0.5 –∏–ª–∏ 100');
  }
  
  const { from, to } = ctx.session;
  const minAmount = cryptoData[from]?.min || 0;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
  if (amount < minAmount) {
    return ctx.reply(`‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–±–º–µ–Ω–∞: ${minAmount} ${from}`);
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª–∫–∏ –≤ USD
  const usdRate = exchangeRates[`${from}_USDT`];
  if (usdRate && (amount * usdRate) < CONFIG.MIN_AMOUNT_USD) {
    return ctx.reply(`‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–±–º–µ–Ω–∞: ${(CONFIG.MIN_AMOUNT_USD / usdRate).toFixed(8)} ${from} (${CONFIG.MIN_AMOUNT_USD} USD)`);
  }
  
  const pair = `${from}_${to}`;
  if (!exchangeRates[pair]) {
    return ctx.reply('‚ùå –ö—É—Ä—Å –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
  }
  
  // –†–∞—Å—Å—á–µ—Ç —Å—É–º–º—ã —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏
  const commission = amount * (CONFIG.COMMISSION_PERCENT / 100);
  const netAmount = amount - commission;
  const rate = exchangeRates[pair];
  const result = (netAmount * rate).toFixed(8);
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  ctx.session.order = {
    amount,
    netAmount,
    commission,
    from,
    to,
    rate,
    result,
    timestamp: Date.now()
  };
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–∞–ª—é—Ç–∞–º
  const fromCurrency = cryptoData[from] || { name: from };
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  const formattedAmount = formatCrypto(amount, from);
  const formattedResult = formatCrypto(result, to);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  ctx.replyWithMarkdown(`‚úÖ *–î–µ—Ç–∞–ª–∏ –æ–±–º–µ–Ω–∞:*
  
‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ: *${formattedAmount} ${from}*
‚ûñ –ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞ (${CONFIG.COMMISSION_PERCENT}%): *${formatCrypto(commission, from)} ${from}*
üîÑ –ö –æ–±–º–µ–Ω—É: *${formatCrypto(netAmount, from)} ${from}*
‚¨ÖÔ∏è –ü–æ–ª—É—á–∞–µ—Ç–µ: *${formattedResult} ${to}*
üìä –ö—É—Ä—Å: 1 ${from} = ${rate} ${to}

üí≥ *–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏:*
1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ ${formattedAmount} ${from} –Ω–∞ –∞–¥—Ä–µ—Å:
\`${fromCurrency.wallet}\`

2. –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏—à–ª–∏—Ç–µ TXID (—Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏) –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

‚è±Ô∏è –û—Ä–¥–µ—Ä –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω ${CONFIG.ORDER_EXPIRY_MINUTES} –º–∏–Ω—É—Ç`);

  ctx.session.step = 'confirm_txid';
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤
async function sendCrypto(to, amount, currency) {
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API –∫–æ—à–µ–ª—å–∫–∞
  console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ ${amount} ${currency} –Ω–∞ –∞–¥—Ä–µ—Å ${to}`);
  
  // –ò–º–∏—Ç–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const txid = '0x' + [...Array(64)].map(() => Math.floor(Math.random() * 16).toString(16)).join('');
  
  return {
    success: true,
    txid,
    amount,
    currency,
    to
  };
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ TXID
async function handleTxidInput(ctx) {
  const txid = ctx.message.text.trim();
  const { order } = ctx.session;
  
  if (!order) {
    return ctx.reply('‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–¥–µ—Ä–µ –ø–æ—Ç–µ—Ä—è–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /exchange');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ä–¥–µ—Ä–∞
  const orderAge = (Date.now() - order.timestamp) / 60000;
  if (orderAge > CONFIG.ORDER_EXPIRY_MINUTES) {
    clearUserSession(ctx);
    return ctx.reply('‚ùå –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –æ—Ä–¥–µ—Ä–∞ –∏—Å—Ç–µ–∫–ª–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /exchange');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ TXID
  if (!txid || txid.length < 10) {
    return ctx.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç TXID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
  }
  
  // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  ctx.reply('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...');
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  ctx.reply('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞...');
  const sendResult = await sendCrypto(
    ctx.session.walletAddress,
    order.result,
    order.to
  );
  
  if (!sendResult.success) {
    return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ä–µ–¥—Å—Ç–≤. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.');
  }
  
  const formattedAmount = formatCrypto(order.result, order.to);
  
  ctx.replyWithMarkdown(`‚úÖ *–û–±–º–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!*
  
‚û°Ô∏è –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏: *${formatCrypto(order.amount, order.from)} ${order.from}*
‚¨ÖÔ∏è –í—ã –ø–æ–ª—É—á–∏–ª–∏: *${formattedAmount} ${order.to}*
üí∏ –ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞: *${formatCrypto(order.commission, order.from)} ${order.from}*

üì¨ –°—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫:
\`${ctx.session.walletAddress}\`

üîó –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏: [${sendResult.txid}](${cryptoData[order.to]?.explorer(sendResult.txid) || '#'})
‚è±Ô∏è –î–∞—Ç–∞: ${new Date().toLocaleString()}

–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!`);

  // –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏
  clearUserSession(ctx);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function formatCrypto(value, currency) {
  const num = parseFloat(value);
  const decimals = cryptoData[currency]?.decimals || 8;
  return num.toLocaleString('en', {
    minimumFractionDigits: 0,
    maximumFractionDigits: decimals
  });
}

function clearUserSession(ctx) {
  const userId = ctx.from?.id;
  if (userId && userSessions[userId]) {
    clearTimeout(userSessions[userId].timer);
    delete userSessions[userId];
  }
  ctx.session = {};
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Vercel
module.exports = async (req, res) => {
  try {
    if (req.method === 'POST') {
      await bot.handleUpdate(req.body, res);
    } else {
      res.status(200).json({ 
        status: 'active',
        service: 'Crypto Exchange Bot',
        version: '3.0',
        hot_wallet: HOT_WALLET.address,
        currencies: Object.keys(cryptoData)
      });
    }
  } catch (err) {
    console.error('Global error:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
};

console.log('Crypto Exchange Bot started');
console.log('Hot wallet address:', HOT_WALLET.address);